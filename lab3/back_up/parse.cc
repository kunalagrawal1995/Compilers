// Generated by Bisonc++ V4.05.00 on Thu, 28 Apr 2016 01:19:24 +0530

// $insert class.ih
#include "Parser.ih"
#include "symcheck.cpp"

// The FIRST element of SR arrays shown below uses `d_type', defining the
// state's type, and `d_lastIdx' containing the last element's index. If
// d_lastIdx contains the REQ_TOKEN bitflag (see below) then the state needs
// a token: if in this state d_token__ is _UNDETERMINED_, nextToken() will be
// called

// The LAST element of SR arrays uses `d_token' containing the last retrieved
// token to speed up the (linear) seach.  Except for the first element of SR
// arrays, the field `d_action' is used to determine what to do next. If
// positive, it represents the next state (used with SHIFT); if zero, it
// indicates `ACCEPT', if negative, -d_action represents the number of the
// rule to reduce to.

// `lookup()' tries to find d_token__ in the current SR array. If it fails, and
// there is no default reduction UNEXPECTED_TOKEN__ is thrown, which is then
// caught by the error-recovery function.

// The error-recovery function will pop elements off the stack until a state
// having bit flag ERR_ITEM is found. This state has a transition on _error_
// which is applied. In this _error_ state, while the current token is not a
// proper continuation, new tokens are obtained by nextToken(). If such a
// token is found, error recovery is successful and the token is
// handled according to the error state's SR table and parsing continues.
// During error recovery semantic actions are ignored.

// A state flagged with the DEF_RED flag will perform a default
// reduction if no other continuations are available for the current token.

// The ACCEPT STATE never shows a default reduction: when it is reached the
// parser returns ACCEPT(). During the grammar
// analysis phase a default reduction may have been defined, but it is
// removed during the state-definition phase.

// So:
//      s_x[] = 
//      {
//                  [_field_1_]         [_field_2_]
//
// First element:   {state-type,        idx of last element},
// Other elements:  {required token,    action to perform},
//                                      ( < 0: reduce, 
//                                          0: ACCEPT,
//                                        > 0: next state)
// Last element:    {set to d_token__,    action to perform}
//      }

// When the --thread-safe option is specified, all static data are defined as
// const. If --thread-safe is not provided, the state-tables are not defined
// as const, since the lookup() function below will modify them


namespace // anonymous
{
    char const author[] = "Frank B. Brokken (f.b.brokken@rug.nl)";

    enum 
    {
        STACK_EXPANSION = 5     // size to expand the state-stack with when
                                // full
    };

    enum ReservedTokens
    {
        PARSE_ACCEPT     = 0,   // `ACCEPT' TRANSITION
        _UNDETERMINED_   = -2,
        _EOF_            = -1,
        _error_          = 256
    };
    enum StateType       // modify statetype/data.cc when this enum changes
    {
        NORMAL,
        ERR_ITEM,
        REQ_TOKEN,
        ERR_REQ,    // ERR_ITEM | REQ_TOKEN
        DEF_RED,    // state having default reduction
        ERR_DEF,    // ERR_ITEM | DEF_RED
        REQ_DEF,    // REQ_TOKEN | DEF_RED
        ERR_REQ_DEF // ERR_ITEM | REQ_TOKEN | DEF_RED
    };    
    struct PI__     // Production Info
    {
        size_t d_nonTerm; // identification number of this production's
                            // non-terminal 
        size_t d_size;    // number of elements in this production 
    };

    struct SR__     // Shift Reduce info, see its description above
    {
        union
        {
            int _field_1_;      // initializer, allowing initializations 
                                // of the SR s_[] arrays
            int d_type;
            int d_token;
        };
        union
        {
            int _field_2_;

            int d_lastIdx;          // if negative, the state uses SHIFT
            int d_action;           // may be negative (reduce), 
                                    // postive (shift), or 0 (accept)
            size_t d_errorState;    // used with Error states
        };
    };

    // $insert staticdata
    
// Productions Info Records:
PI__ const s_productionInfo[] = 
{
     {0, 0}, // not used: reduction values are negative
     {304, 1}, // 1: print_symtabs_and_ast ->  translation_unit
     {305, 1}, // 2: translation_unit ->  struct_specifier
     {305, 1}, // 3: translation_unit ->  function_definition
     {305, 2}, // 4: translation_unit ->  translation_unit function_definition
     {305, 2}, // 5: translation_unit ->  translation_unit struct_specifier
     {306, 6}, // 6: struct_specifier (STRUCT) ->  STRUCT IDENTIFIER '{' declaration_list '}' ';'
     {308, 4}, // 7: function_definition ->  type_specifier fun_declarator #0001 compound_statement
     {309, 0}, // 8: #0001 ->  <empty>
     {310, 1}, // 9: type_specifier (VOID) ->  VOID
     {310, 1}, // 10: type_specifier (INT) ->  INT
     {310, 1}, // 11: type_specifier (FLOAT) ->  FLOAT
     {310, 2}, // 12: type_specifier (STRUCT) ->  STRUCT IDENTIFIER
     {311, 4}, // 13: fun_declarator (IDENTIFIER) ->  IDENTIFIER '(' parameter_list ')'
     {311, 3}, // 14: fun_declarator (IDENTIFIER) ->  IDENTIFIER '(' ')'
     {311, 2}, // 15: fun_declarator ('*') ->  '*' fun_declarator
     {312, 1}, // 16: parameter_list ->  parameter_declaration
     {312, 3}, // 17: parameter_list (',') ->  parameter_list ',' parameter_declaration
     {313, 2}, // 18: parameter_declaration ->  type_specifier declarator
     {314, 1}, // 19: declarator (IDENTIFIER) ->  IDENTIFIER
     {314, 4}, // 20: declarator ('[') ->  declarator '[' primary_expression ']'
     {314, 2}, // 21: declarator ('*') ->  '*' declarator
     {315, 2}, // 22: compound_statement ('{') ->  '{' '}'
     {315, 3}, // 23: compound_statement ('{') ->  '{' statement_list '}'
     {315, 4}, // 24: compound_statement ('{') ->  '{' declaration_list statement_list '}'
     {316, 1}, // 25: statement_list ->  statement
     {316, 2}, // 26: statement_list ->  statement_list statement
     {317, 3}, // 27: statement ('{') ->  '{' statement_list '}'
     {317, 1}, // 28: statement ->  selection_statement
     {317, 1}, // 29: statement ->  iteration_statement
     {317, 1}, // 30: statement ->  assignment_statement
     {317, 3}, // 31: statement (RETURN) ->  RETURN expression ';'
     {318, 1}, // 32: assignment_statement (';') ->  ';'
     {318, 2}, // 33: assignment_statement (';') ->  expression ';'
     {319, 1}, // 34: expression ->  logical_or_expression
     {319, 3}, // 35: expression ('=') ->  unary_expression '=' expression
     {320, 1}, // 36: logical_or_expression ->  logical_and_expression
     {320, 3}, // 37: logical_or_expression (OR_OP) ->  logical_or_expression OR_OP logical_and_expression
     {321, 1}, // 38: logical_and_expression ->  equality_expression
     {321, 3}, // 39: logical_and_expression (AND_OP) ->  logical_and_expression AND_OP equality_expression
     {322, 1}, // 40: equality_expression ->  relational_expression
     {322, 3}, // 41: equality_expression (EQ_OP) ->  equality_expression EQ_OP relational_expression
     {322, 3}, // 42: equality_expression (NE_OP) ->  equality_expression NE_OP relational_expression
     {323, 1}, // 43: relational_expression ->  additive_expression
     {323, 3}, // 44: relational_expression ('<') ->  relational_expression '<' additive_expression
     {323, 3}, // 45: relational_expression ('>') ->  relational_expression '>' additive_expression
     {323, 3}, // 46: relational_expression (LE_OP) ->  relational_expression LE_OP additive_expression
     {323, 3}, // 47: relational_expression (GE_OP) ->  relational_expression GE_OP additive_expression
     {324, 1}, // 48: additive_expression ->  multiplicative_expression
     {324, 3}, // 49: additive_expression ('+') ->  additive_expression '+' multiplicative_expression
     {324, 3}, // 50: additive_expression ('-') ->  additive_expression '-' multiplicative_expression
     {325, 1}, // 51: multiplicative_expression ->  unary_expression
     {325, 3}, // 52: multiplicative_expression ('*') ->  multiplicative_expression '*' unary_expression
     {325, 3}, // 53: multiplicative_expression ('/') ->  multiplicative_expression '/' unary_expression
     {326, 1}, // 54: unary_expression ->  postfix_expression
     {326, 2}, // 55: unary_expression ->  unary_operator postfix_expression
     {327, 1}, // 56: postfix_expression ->  primary_expression
     {327, 3}, // 57: postfix_expression (IDENTIFIER) ->  IDENTIFIER '(' ')'
     {327, 4}, // 58: postfix_expression (IDENTIFIER) ->  IDENTIFIER '(' expression_list ')'
     {327, 4}, // 59: postfix_expression ('[') ->  postfix_expression '[' expression ']'
     {327, 3}, // 60: postfix_expression ('.') ->  postfix_expression '.' IDENTIFIER
     {327, 3}, // 61: postfix_expression (PTR_OP) ->  postfix_expression PTR_OP IDENTIFIER
     {327, 2}, // 62: postfix_expression (INC_OP) ->  postfix_expression INC_OP
     {328, 1}, // 63: primary_expression (IDENTIFIER) ->  IDENTIFIER
     {328, 1}, // 64: primary_expression (INT_CONSTANT) ->  INT_CONSTANT
     {328, 1}, // 65: primary_expression (FLOAT_CONSTANT) ->  FLOAT_CONSTANT
     {328, 1}, // 66: primary_expression (STRING_LITERAL) ->  STRING_LITERAL
     {328, 3}, // 67: primary_expression ('(') ->  '(' expression ')'
     {329, 1}, // 68: expression_list ->  expression
     {329, 3}, // 69: expression_list (',') ->  expression_list ',' expression
     {330, 1}, // 70: unary_operator ('-') ->  '-'
     {330, 1}, // 71: unary_operator ('!') ->  '!'
     {330, 1}, // 72: unary_operator ('&') ->  '&'
     {330, 1}, // 73: unary_operator ('*') ->  '*'
     {331, 7}, // 74: selection_statement (IF) ->  IF '(' expression ')' statement ELSE statement
     {332, 5}, // 75: iteration_statement (WHILE) ->  WHILE '(' expression ')' statement
     {332, 9}, // 76: iteration_statement (FOR) ->  FOR '(' expression ';' expression ';' expression ')' statement
     {307, 1}, // 77: declaration_list ->  declaration
     {307, 2}, // 78: declaration_list ->  declaration_list declaration
     {333, 3}, // 79: declaration (';') ->  type_specifier declarator_list ';'
     {334, 1}, // 80: declarator_list ->  declarator
     {334, 3}, // 81: declarator_list (',') ->  declarator_list ',' declarator
     {335, 1}, // 82: print_symtabs_and_ast_$ ->  print_symtabs_and_ast
};

// State info and SR__ transitions for each state.


SR__ s_0[] =
{
    { { REQ_TOKEN}, { 10} },                         
    { {       304}, {  1} }, // print_symtabs_and_ast
    { {       305}, {  2} }, // translation_unit     
    { {       306}, {  3} }, // struct_specifier     
    { {       308}, {  4} }, // function_definition  
    { {       302}, {  5} }, // STRUCT               
    { {       310}, {  6} }, // type_specifier       
    { {       286}, {  7} }, // VOID                 
    { {       284}, {  8} }, // INT                  
    { {       283}, {  9} }, // FLOAT                
    { {         0}, {  0} },                         
};

SR__ s_1[] =
{
    { { REQ_TOKEN}, {            2} }, 
    { {     _EOF_}, { PARSE_ACCEPT} }, 
    { {         0}, {            0} }, 
};

SR__ s_2[] =
{
    { { REQ_DEF}, {  8} },                       
    { {     308}, { 10} }, // function_definition
    { {     306}, { 11} }, // struct_specifier   
    { {     310}, {  6} }, // type_specifier     
    { {     302}, {  5} }, // STRUCT             
    { {     286}, {  7} }, // VOID               
    { {     284}, {  8} }, // INT                
    { {     283}, {  9} }, // FLOAT              
    { {       0}, { -1} },                       
};

SR__ s_3[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -2} }, 
};

SR__ s_4[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -3} }, 
};

SR__ s_5[] =
{
    { { REQ_TOKEN}, {  2} },              
    { {       278}, { 12} }, // IDENTIFIER
    { {         0}, {  0} },              
};

SR__ s_6[] =
{
    { { REQ_TOKEN}, {  4} },                  
    { {       311}, { 13} }, // fun_declarator
    { {       278}, { 14} }, // IDENTIFIER    
    { {        42}, { 15} }, // '*'           
    { {         0}, {  0} },                  
};

SR__ s_7[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -9} }, 
};

SR__ s_8[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -10} }, 
};

SR__ s_9[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -11} }, 
};

SR__ s_10[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -4} }, 
};

SR__ s_11[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -5} }, 
};

SR__ s_12[] =
{
    { { REQ_DEF}, {   2} },       
    { {     123}, {  16} }, // '{'
    { {       0}, { -12} },       
};

SR__ s_13[] =
{
    { { DEF_RED}, {  2} },         
    { {     309}, { 17} }, // #0001
    { {       0}, { -8} },         
};

SR__ s_14[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        40}, { 18} }, // '('
    { {         0}, {  0} },       
};

SR__ s_15[] =
{
    { { REQ_TOKEN}, {  4} },                  
    { {       311}, { 19} }, // fun_declarator
    { {       278}, { 14} }, // IDENTIFIER    
    { {        42}, { 15} }, // '*'           
    { {         0}, {  0} },                  
};

SR__ s_16[] =
{
    { { REQ_TOKEN}, {  8} },                    
    { {       307}, { 20} }, // declaration_list
    { {       333}, { 21} }, // declaration     
    { {       310}, { 22} }, // type_specifier  
    { {       286}, {  7} }, // VOID            
    { {       284}, {  8} }, // INT             
    { {       283}, {  9} }, // FLOAT           
    { {       302}, { 23} }, // STRUCT          
    { {         0}, {  0} },                    
};

SR__ s_17[] =
{
    { { REQ_TOKEN}, {  3} },                      
    { {       315}, { 24} }, // compound_statement
    { {       123}, { 25} }, // '{'               
    { {         0}, {  0} },                      
};

SR__ s_18[] =
{
    { { REQ_TOKEN}, {  9} },                         
    { {       312}, { 26} }, // parameter_list       
    { {        41}, { 27} }, // ')'                  
    { {       313}, { 28} }, // parameter_declaration
    { {       310}, { 29} }, // type_specifier       
    { {       286}, {  7} }, // VOID                 
    { {       284}, {  8} }, // INT                  
    { {       283}, {  9} }, // FLOAT                
    { {       302}, { 23} }, // STRUCT               
    { {         0}, {  0} },                         
};

SR__ s_19[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -15} }, 
};

SR__ s_20[] =
{
    { { REQ_TOKEN}, {  8} },                  
    { {       125}, { 30} }, // '}'           
    { {       333}, { 31} }, // declaration   
    { {       310}, { 22} }, // type_specifier
    { {       286}, {  7} }, // VOID          
    { {       284}, {  8} }, // INT           
    { {       283}, {  9} }, // FLOAT         
    { {       302}, { 23} }, // STRUCT        
    { {         0}, {  0} },                  
};

SR__ s_21[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -77} }, 
};

SR__ s_22[] =
{
    { { REQ_TOKEN}, {  5} },                   
    { {       334}, { 32} }, // declarator_list
    { {       314}, { 33} }, // declarator     
    { {       278}, { 34} }, // IDENTIFIER     
    { {        42}, { 35} }, // '*'            
    { {         0}, {  0} },                   
};

SR__ s_23[] =
{
    { { REQ_TOKEN}, {  2} },              
    { {       278}, { 36} }, // IDENTIFIER
    { {         0}, {  0} },              
};

SR__ s_24[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -7} }, 
};

SR__ s_25[] =
{
    { { REQ_TOKEN}, { 40} },                             
    { {       125}, { 37} }, // '}'                      
    { {       316}, { 38} }, // statement_list           
    { {       307}, { 39} }, // declaration_list         
    { {       317}, { 40} }, // statement                
    { {       333}, { 21} }, // declaration              
    { {       123}, { 41} }, // '{'                      
    { {       331}, { 42} }, // selection_statement      
    { {       332}, { 43} }, // iteration_statement      
    { {       318}, { 44} }, // assignment_statement     
    { {       292}, { 45} }, // RETURN                   
    { {       310}, { 22} }, // type_specifier           
    { {       288}, { 46} }, // IF                       
    { {       290}, { 47} }, // WHILE                    
    { {       291}, { 48} }, // FOR                      
    { {        59}, { 49} }, // ';'                      
    { {       319}, { 50} }, // expression               
    { {       286}, {  7} }, // VOID                     
    { {       284}, {  8} }, // INT                      
    { {       283}, {  9} }, // FLOAT                    
    { {       302}, { 23} }, // STRUCT                   
    { {       320}, { 51} }, // logical_or_expression    
    { {       326}, { 52} }, // unary_expression         
    { {       321}, { 53} }, // logical_and_expression   
    { {       327}, { 54} }, // postfix_expression       
    { {       330}, { 55} }, // unary_operator           
    { {       322}, { 56} }, // equality_expression      
    { {       328}, { 57} }, // primary_expression       
    { {       278}, { 58} }, // IDENTIFIER               
    { {        45}, { 59} }, // '-'                      
    { {        33}, { 60} }, // '!'                      
    { {        38}, { 61} }, // '&'                      
    { {        42}, { 62} }, // '*'                      
    { {       323}, { 63} }, // relational_expression    
    { {       285}, { 64} }, // INT_CONSTANT             
    { {       287}, { 65} }, // FLOAT_CONSTANT           
    { {       301}, { 66} }, // STRING_LITERAL           
    { {        40}, { 67} }, // '('                      
    { {       324}, { 68} }, // additive_expression      
    { {       325}, { 69} }, // multiplicative_expression
    { {         0}, {  0} },                             
};

SR__ s_26[] =
{
    { { REQ_TOKEN}, {  3} },       
    { {        41}, { 70} }, // ')'
    { {        44}, { 71} }, // ','
    { {         0}, {  0} },       
};

SR__ s_27[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -14} }, 
};

SR__ s_28[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -16} }, 
};

SR__ s_29[] =
{
    { { REQ_TOKEN}, {  4} },              
    { {       314}, { 72} }, // declarator
    { {       278}, { 34} }, // IDENTIFIER
    { {        42}, { 35} }, // '*'       
    { {         0}, {  0} },              
};

SR__ s_30[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        59}, { 73} }, // ';'
    { {         0}, {  0} },       
};

SR__ s_31[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -78} }, 
};

SR__ s_32[] =
{
    { { REQ_TOKEN}, {  3} },       
    { {        59}, { 74} }, // ';'
    { {        44}, { 75} }, // ','
    { {         0}, {  0} },       
};

SR__ s_33[] =
{
    { { REQ_DEF}, {   2} },       
    { {      91}, {  76} }, // '['
    { {       0}, { -80} },       
};

SR__ s_34[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -19} }, 
};

SR__ s_35[] =
{
    { { REQ_TOKEN}, {  4} },              
    { {       314}, { 77} }, // declarator
    { {       278}, { 34} }, // IDENTIFIER
    { {        42}, { 35} }, // '*'       
    { {         0}, {  0} },              
};

SR__ s_36[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -12} }, 
};

SR__ s_37[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -22} }, 
};

SR__ s_38[] =
{
    { { REQ_TOKEN}, { 32} },                             
    { {       125}, { 78} }, // '}'                      
    { {       317}, { 79} }, // statement                
    { {       123}, { 41} }, // '{'                      
    { {       331}, { 42} }, // selection_statement      
    { {       332}, { 43} }, // iteration_statement      
    { {       318}, { 44} }, // assignment_statement     
    { {       292}, { 45} }, // RETURN                   
    { {       288}, { 46} }, // IF                       
    { {       290}, { 47} }, // WHILE                    
    { {       291}, { 48} }, // FOR                      
    { {        59}, { 49} }, // ';'                      
    { {       319}, { 50} }, // expression               
    { {       320}, { 51} }, // logical_or_expression    
    { {       326}, { 52} }, // unary_expression         
    { {       321}, { 53} }, // logical_and_expression   
    { {       327}, { 54} }, // postfix_expression       
    { {       330}, { 55} }, // unary_operator           
    { {       322}, { 56} }, // equality_expression      
    { {       328}, { 57} }, // primary_expression       
    { {       278}, { 58} }, // IDENTIFIER               
    { {        45}, { 59} }, // '-'                      
    { {        33}, { 60} }, // '!'                      
    { {        38}, { 61} }, // '&'                      
    { {        42}, { 62} }, // '*'                      
    { {       323}, { 63} }, // relational_expression    
    { {       285}, { 64} }, // INT_CONSTANT             
    { {       287}, { 65} }, // FLOAT_CONSTANT           
    { {       301}, { 66} }, // STRING_LITERAL           
    { {        40}, { 67} }, // '('                      
    { {       324}, { 68} }, // additive_expression      
    { {       325}, { 69} }, // multiplicative_expression
    { {         0}, {  0} },                             
};

SR__ s_39[] =
{
    { { REQ_TOKEN}, { 38} },                             
    { {       316}, { 80} }, // statement_list           
    { {       333}, { 31} }, // declaration              
    { {       317}, { 40} }, // statement                
    { {       310}, { 22} }, // type_specifier           
    { {       123}, { 41} }, // '{'                      
    { {       331}, { 42} }, // selection_statement      
    { {       332}, { 43} }, // iteration_statement      
    { {       318}, { 44} }, // assignment_statement     
    { {       292}, { 45} }, // RETURN                   
    { {       286}, {  7} }, // VOID                     
    { {       284}, {  8} }, // INT                      
    { {       283}, {  9} }, // FLOAT                    
    { {       302}, { 23} }, // STRUCT                   
    { {       288}, { 46} }, // IF                       
    { {       290}, { 47} }, // WHILE                    
    { {       291}, { 48} }, // FOR                      
    { {        59}, { 49} }, // ';'                      
    { {       319}, { 50} }, // expression               
    { {       320}, { 51} }, // logical_or_expression    
    { {       326}, { 52} }, // unary_expression         
    { {       321}, { 53} }, // logical_and_expression   
    { {       327}, { 54} }, // postfix_expression       
    { {       330}, { 55} }, // unary_operator           
    { {       322}, { 56} }, // equality_expression      
    { {       328}, { 57} }, // primary_expression       
    { {       278}, { 58} }, // IDENTIFIER               
    { {        45}, { 59} }, // '-'                      
    { {        33}, { 60} }, // '!'                      
    { {        38}, { 61} }, // '&'                      
    { {        42}, { 62} }, // '*'                      
    { {       323}, { 63} }, // relational_expression    
    { {       285}, { 64} }, // INT_CONSTANT             
    { {       287}, { 65} }, // FLOAT_CONSTANT           
    { {       301}, { 66} }, // STRING_LITERAL           
    { {        40}, { 67} }, // '('                      
    { {       324}, { 68} }, // additive_expression      
    { {       325}, { 69} }, // multiplicative_expression
    { {         0}, {  0} },                             
};

SR__ s_40[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -25} }, 
};

SR__ s_41[] =
{
    { { REQ_TOKEN}, { 32} },                             
    { {       316}, { 81} }, // statement_list           
    { {       317}, { 40} }, // statement                
    { {       123}, { 41} }, // '{'                      
    { {       331}, { 42} }, // selection_statement      
    { {       332}, { 43} }, // iteration_statement      
    { {       318}, { 44} }, // assignment_statement     
    { {       292}, { 45} }, // RETURN                   
    { {       288}, { 46} }, // IF                       
    { {       290}, { 47} }, // WHILE                    
    { {       291}, { 48} }, // FOR                      
    { {        59}, { 49} }, // ';'                      
    { {       319}, { 50} }, // expression               
    { {       320}, { 51} }, // logical_or_expression    
    { {       326}, { 52} }, // unary_expression         
    { {       321}, { 53} }, // logical_and_expression   
    { {       327}, { 54} }, // postfix_expression       
    { {       330}, { 55} }, // unary_operator           
    { {       322}, { 56} }, // equality_expression      
    { {       328}, { 57} }, // primary_expression       
    { {       278}, { 58} }, // IDENTIFIER               
    { {        45}, { 59} }, // '-'                      
    { {        33}, { 60} }, // '!'                      
    { {        38}, { 61} }, // '&'                      
    { {        42}, { 62} }, // '*'                      
    { {       323}, { 63} }, // relational_expression    
    { {       285}, { 64} }, // INT_CONSTANT             
    { {       287}, { 65} }, // FLOAT_CONSTANT           
    { {       301}, { 66} }, // STRING_LITERAL           
    { {        40}, { 67} }, // '('                      
    { {       324}, { 68} }, // additive_expression      
    { {       325}, { 69} }, // multiplicative_expression
    { {         0}, {  0} },                             
};

SR__ s_42[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -28} }, 
};

SR__ s_43[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -29} }, 
};

SR__ s_44[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -30} }, 
};

SR__ s_45[] =
{
    { { REQ_TOKEN}, { 21} },                             
    { {       319}, { 82} }, // expression               
    { {       320}, { 51} }, // logical_or_expression    
    { {       326}, { 52} }, // unary_expression         
    { {       321}, { 53} }, // logical_and_expression   
    { {       327}, { 54} }, // postfix_expression       
    { {       330}, { 55} }, // unary_operator           
    { {       322}, { 56} }, // equality_expression      
    { {       328}, { 57} }, // primary_expression       
    { {       278}, { 58} }, // IDENTIFIER               
    { {        45}, { 59} }, // '-'                      
    { {        33}, { 60} }, // '!'                      
    { {        38}, { 61} }, // '&'                      
    { {        42}, { 62} }, // '*'                      
    { {       323}, { 63} }, // relational_expression    
    { {       285}, { 64} }, // INT_CONSTANT             
    { {       287}, { 65} }, // FLOAT_CONSTANT           
    { {       301}, { 66} }, // STRING_LITERAL           
    { {        40}, { 67} }, // '('                      
    { {       324}, { 68} }, // additive_expression      
    { {       325}, { 69} }, // multiplicative_expression
    { {         0}, {  0} },                             
};

SR__ s_46[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        40}, { 83} }, // '('
    { {         0}, {  0} },       
};

SR__ s_47[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        40}, { 84} }, // '('
    { {         0}, {  0} },       
};

SR__ s_48[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        40}, { 85} }, // '('
    { {         0}, {  0} },       
};

SR__ s_49[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -32} }, 
};

SR__ s_50[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        59}, { 86} }, // ';'
    { {         0}, {  0} },       
};

SR__ s_51[] =
{
    { { REQ_DEF}, {   2} },         
    { {     298}, {  87} }, // OR_OP
    { {       0}, { -34} },         
};

SR__ s_52[] =
{
    { { REQ_DEF}, {   2} },       
    { {      61}, {  88} }, // '='
    { {       0}, { -51} },       
};

SR__ s_53[] =
{
    { { REQ_DEF}, {   2} },          
    { {     297}, {  89} }, // AND_OP
    { {       0}, { -36} },          
};

SR__ s_54[] =
{
    { { REQ_DEF}, {   5} },          
    { {      91}, {  90} }, // '['   
    { {      46}, {  91} }, // '.'   
    { {     303}, {  92} }, // PTR_OP
    { {     299}, {  93} }, // INC_OP
    { {       0}, { -54} },          
};

SR__ s_55[] =
{
    { { REQ_TOKEN}, {  8} },                      
    { {       327}, { 94} }, // postfix_expression
    { {       328}, { 57} }, // primary_expression
    { {       278}, { 58} }, // IDENTIFIER        
    { {       285}, { 64} }, // INT_CONSTANT      
    { {       287}, { 65} }, // FLOAT_CONSTANT    
    { {       301}, { 66} }, // STRING_LITERAL    
    { {        40}, { 67} }, // '('               
    { {         0}, {  0} },                      
};

SR__ s_56[] =
{
    { { REQ_DEF}, {   3} },         
    { {     296}, {  95} }, // EQ_OP
    { {     295}, {  96} }, // NE_OP
    { {       0}, { -38} },         
};

SR__ s_57[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -56} }, 
};

SR__ s_58[] =
{
    { { REQ_DEF}, {   2} },       
    { {      40}, {  97} }, // '('
    { {       0}, { -63} },       
};

SR__ s_59[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -70} }, 
};

SR__ s_60[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -71} }, 
};

SR__ s_61[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -72} }, 
};

SR__ s_62[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -73} }, 
};

SR__ s_63[] =
{
    { { REQ_DEF}, {   5} },         
    { {      60}, {  98} }, // '<'  
    { {      62}, {  99} }, // '>'  
    { {     293}, { 100} }, // LE_OP
    { {     294}, { 101} }, // GE_OP
    { {       0}, { -40} },         
};

SR__ s_64[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -64} }, 
};

SR__ s_65[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -65} }, 
};

SR__ s_66[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -66} }, 
};

SR__ s_67[] =
{
    { { REQ_TOKEN}, {  21} },                             
    { {       319}, { 102} }, // expression               
    { {       320}, {  51} }, // logical_or_expression    
    { {       326}, {  52} }, // unary_expression         
    { {       321}, {  53} }, // logical_and_expression   
    { {       327}, {  54} }, // postfix_expression       
    { {       330}, {  55} }, // unary_operator           
    { {       322}, {  56} }, // equality_expression      
    { {       328}, {  57} }, // primary_expression       
    { {       278}, {  58} }, // IDENTIFIER               
    { {        45}, {  59} }, // '-'                      
    { {        33}, {  60} }, // '!'                      
    { {        38}, {  61} }, // '&'                      
    { {        42}, {  62} }, // '*'                      
    { {       323}, {  63} }, // relational_expression    
    { {       285}, {  64} }, // INT_CONSTANT             
    { {       287}, {  65} }, // FLOAT_CONSTANT           
    { {       301}, {  66} }, // STRING_LITERAL           
    { {        40}, {  67} }, // '('                      
    { {       324}, {  68} }, // additive_expression      
    { {       325}, {  69} }, // multiplicative_expression
    { {         0}, {   0} },                             
};

SR__ s_68[] =
{
    { { REQ_DEF}, {   3} },       
    { {      43}, { 103} }, // '+'
    { {      45}, { 104} }, // '-'
    { {       0}, { -43} },       
};

SR__ s_69[] =
{
    { { REQ_DEF}, {   3} },       
    { {      42}, { 105} }, // '*'
    { {      47}, { 106} }, // '/'
    { {       0}, { -48} },       
};

SR__ s_70[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -13} }, 
};

SR__ s_71[] =
{
    { { REQ_TOKEN}, {   7} },                         
    { {       313}, { 107} }, // parameter_declaration
    { {       310}, {  29} }, // type_specifier       
    { {       286}, {   7} }, // VOID                 
    { {       284}, {   8} }, // INT                  
    { {       283}, {   9} }, // FLOAT                
    { {       302}, {  23} }, // STRUCT               
    { {         0}, {   0} },                         
};

SR__ s_72[] =
{
    { { REQ_DEF}, {   2} },       
    { {      91}, {  76} }, // '['
    { {       0}, { -18} },       
};

SR__ s_73[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -6} }, 
};

SR__ s_74[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -79} }, 
};

SR__ s_75[] =
{
    { { REQ_TOKEN}, {   4} },              
    { {       314}, { 108} }, // declarator
    { {       278}, {  34} }, // IDENTIFIER
    { {        42}, {  35} }, // '*'       
    { {         0}, {   0} },              
};

SR__ s_76[] =
{
    { { REQ_TOKEN}, {   7} },                      
    { {       328}, { 109} }, // primary_expression
    { {       278}, { 110} }, // IDENTIFIER        
    { {       285}, {  64} }, // INT_CONSTANT      
    { {       287}, {  65} }, // FLOAT_CONSTANT    
    { {       301}, {  66} }, // STRING_LITERAL    
    { {        40}, {  67} }, // '('               
    { {         0}, {   0} },                      
};

SR__ s_77[] =
{
    { { REQ_DEF}, {   2} },       
    { {      91}, {  76} }, // '['
    { {       0}, { -21} },       
};

SR__ s_78[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -23} }, 
};

SR__ s_79[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -26} }, 
};

SR__ s_80[] =
{
    { { REQ_TOKEN}, {  32} },                             
    { {       125}, { 111} }, // '}'                      
    { {       317}, {  79} }, // statement                
    { {       123}, {  41} }, // '{'                      
    { {       331}, {  42} }, // selection_statement      
    { {       332}, {  43} }, // iteration_statement      
    { {       318}, {  44} }, // assignment_statement     
    { {       292}, {  45} }, // RETURN                   
    { {       288}, {  46} }, // IF                       
    { {       290}, {  47} }, // WHILE                    
    { {       291}, {  48} }, // FOR                      
    { {        59}, {  49} }, // ';'                      
    { {       319}, {  50} }, // expression               
    { {       320}, {  51} }, // logical_or_expression    
    { {       326}, {  52} }, // unary_expression         
    { {       321}, {  53} }, // logical_and_expression   
    { {       327}, {  54} }, // postfix_expression       
    { {       330}, {  55} }, // unary_operator           
    { {       322}, {  56} }, // equality_expression      
    { {       328}, {  57} }, // primary_expression       
    { {       278}, {  58} }, // IDENTIFIER               
    { {        45}, {  59} }, // '-'                      
    { {        33}, {  60} }, // '!'                      
    { {        38}, {  61} }, // '&'                      
    { {        42}, {  62} }, // '*'                      
    { {       323}, {  63} }, // relational_expression    
    { {       285}, {  64} }, // INT_CONSTANT             
    { {       287}, {  65} }, // FLOAT_CONSTANT           
    { {       301}, {  66} }, // STRING_LITERAL           
    { {        40}, {  67} }, // '('                      
    { {       324}, {  68} }, // additive_expression      
    { {       325}, {  69} }, // multiplicative_expression
    { {         0}, {   0} },                             
};

SR__ s_81[] =
{
    { { REQ_TOKEN}, {  32} },                             
    { {       125}, { 112} }, // '}'                      
    { {       317}, {  79} }, // statement                
    { {       123}, {  41} }, // '{'                      
    { {       331}, {  42} }, // selection_statement      
    { {       332}, {  43} }, // iteration_statement      
    { {       318}, {  44} }, // assignment_statement     
    { {       292}, {  45} }, // RETURN                   
    { {       288}, {  46} }, // IF                       
    { {       290}, {  47} }, // WHILE                    
    { {       291}, {  48} }, // FOR                      
    { {        59}, {  49} }, // ';'                      
    { {       319}, {  50} }, // expression               
    { {       320}, {  51} }, // logical_or_expression    
    { {       326}, {  52} }, // unary_expression         
    { {       321}, {  53} }, // logical_and_expression   
    { {       327}, {  54} }, // postfix_expression       
    { {       330}, {  55} }, // unary_operator           
    { {       322}, {  56} }, // equality_expression      
    { {       328}, {  57} }, // primary_expression       
    { {       278}, {  58} }, // IDENTIFIER               
    { {        45}, {  59} }, // '-'                      
    { {        33}, {  60} }, // '!'                      
    { {        38}, {  61} }, // '&'                      
    { {        42}, {  62} }, // '*'                      
    { {       323}, {  63} }, // relational_expression    
    { {       285}, {  64} }, // INT_CONSTANT             
    { {       287}, {  65} }, // FLOAT_CONSTANT           
    { {       301}, {  66} }, // STRING_LITERAL           
    { {        40}, {  67} }, // '('                      
    { {       324}, {  68} }, // additive_expression      
    { {       325}, {  69} }, // multiplicative_expression
    { {         0}, {   0} },                             
};

SR__ s_82[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        59}, { 113} }, // ';'
    { {         0}, {   0} },       
};

SR__ s_83[] =
{
    { { REQ_TOKEN}, {  21} },                             
    { {       319}, { 114} }, // expression               
    { {       320}, {  51} }, // logical_or_expression    
    { {       326}, {  52} }, // unary_expression         
    { {       321}, {  53} }, // logical_and_expression   
    { {       327}, {  54} }, // postfix_expression       
    { {       330}, {  55} }, // unary_operator           
    { {       322}, {  56} }, // equality_expression      
    { {       328}, {  57} }, // primary_expression       
    { {       278}, {  58} }, // IDENTIFIER               
    { {        45}, {  59} }, // '-'                      
    { {        33}, {  60} }, // '!'                      
    { {        38}, {  61} }, // '&'                      
    { {        42}, {  62} }, // '*'                      
    { {       323}, {  63} }, // relational_expression    
    { {       285}, {  64} }, // INT_CONSTANT             
    { {       287}, {  65} }, // FLOAT_CONSTANT           
    { {       301}, {  66} }, // STRING_LITERAL           
    { {        40}, {  67} }, // '('                      
    { {       324}, {  68} }, // additive_expression      
    { {       325}, {  69} }, // multiplicative_expression
    { {         0}, {   0} },                             
};

SR__ s_84[] =
{
    { { REQ_TOKEN}, {  21} },                             
    { {       319}, { 115} }, // expression               
    { {       320}, {  51} }, // logical_or_expression    
    { {       326}, {  52} }, // unary_expression         
    { {       321}, {  53} }, // logical_and_expression   
    { {       327}, {  54} }, // postfix_expression       
    { {       330}, {  55} }, // unary_operator           
    { {       322}, {  56} }, // equality_expression      
    { {       328}, {  57} }, // primary_expression       
    { {       278}, {  58} }, // IDENTIFIER               
    { {        45}, {  59} }, // '-'                      
    { {        33}, {  60} }, // '!'                      
    { {        38}, {  61} }, // '&'                      
    { {        42}, {  62} }, // '*'                      
    { {       323}, {  63} }, // relational_expression    
    { {       285}, {  64} }, // INT_CONSTANT             
    { {       287}, {  65} }, // FLOAT_CONSTANT           
    { {       301}, {  66} }, // STRING_LITERAL           
    { {        40}, {  67} }, // '('                      
    { {       324}, {  68} }, // additive_expression      
    { {       325}, {  69} }, // multiplicative_expression
    { {         0}, {   0} },                             
};

SR__ s_85[] =
{
    { { REQ_TOKEN}, {  21} },                             
    { {       319}, { 116} }, // expression               
    { {       320}, {  51} }, // logical_or_expression    
    { {       326}, {  52} }, // unary_expression         
    { {       321}, {  53} }, // logical_and_expression   
    { {       327}, {  54} }, // postfix_expression       
    { {       330}, {  55} }, // unary_operator           
    { {       322}, {  56} }, // equality_expression      
    { {       328}, {  57} }, // primary_expression       
    { {       278}, {  58} }, // IDENTIFIER               
    { {        45}, {  59} }, // '-'                      
    { {        33}, {  60} }, // '!'                      
    { {        38}, {  61} }, // '&'                      
    { {        42}, {  62} }, // '*'                      
    { {       323}, {  63} }, // relational_expression    
    { {       285}, {  64} }, // INT_CONSTANT             
    { {       287}, {  65} }, // FLOAT_CONSTANT           
    { {       301}, {  66} }, // STRING_LITERAL           
    { {        40}, {  67} }, // '('                      
    { {       324}, {  68} }, // additive_expression      
    { {       325}, {  69} }, // multiplicative_expression
    { {         0}, {   0} },                             
};

SR__ s_86[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -33} }, 
};

SR__ s_87[] =
{
    { { REQ_TOKEN}, {  19} },                             
    { {       321}, { 117} }, // logical_and_expression   
    { {       322}, {  56} }, // equality_expression      
    { {       323}, {  63} }, // relational_expression    
    { {       324}, {  68} }, // additive_expression      
    { {       325}, {  69} }, // multiplicative_expression
    { {       326}, { 118} }, // unary_expression         
    { {       327}, {  54} }, // postfix_expression       
    { {       330}, {  55} }, // unary_operator           
    { {       328}, {  57} }, // primary_expression       
    { {       278}, {  58} }, // IDENTIFIER               
    { {        45}, {  59} }, // '-'                      
    { {        33}, {  60} }, // '!'                      
    { {        38}, {  61} }, // '&'                      
    { {        42}, {  62} }, // '*'                      
    { {       285}, {  64} }, // INT_CONSTANT             
    { {       287}, {  65} }, // FLOAT_CONSTANT           
    { {       301}, {  66} }, // STRING_LITERAL           
    { {        40}, {  67} }, // '('                      
    { {         0}, {   0} },                             
};

SR__ s_88[] =
{
    { { REQ_TOKEN}, {  21} },                             
    { {       319}, { 119} }, // expression               
    { {       320}, {  51} }, // logical_or_expression    
    { {       326}, {  52} }, // unary_expression         
    { {       321}, {  53} }, // logical_and_expression   
    { {       327}, {  54} }, // postfix_expression       
    { {       330}, {  55} }, // unary_operator           
    { {       322}, {  56} }, // equality_expression      
    { {       328}, {  57} }, // primary_expression       
    { {       278}, {  58} }, // IDENTIFIER               
    { {        45}, {  59} }, // '-'                      
    { {        33}, {  60} }, // '!'                      
    { {        38}, {  61} }, // '&'                      
    { {        42}, {  62} }, // '*'                      
    { {       323}, {  63} }, // relational_expression    
    { {       285}, {  64} }, // INT_CONSTANT             
    { {       287}, {  65} }, // FLOAT_CONSTANT           
    { {       301}, {  66} }, // STRING_LITERAL           
    { {        40}, {  67} }, // '('                      
    { {       324}, {  68} }, // additive_expression      
    { {       325}, {  69} }, // multiplicative_expression
    { {         0}, {   0} },                             
};

SR__ s_89[] =
{
    { { REQ_TOKEN}, {  18} },                             
    { {       322}, { 120} }, // equality_expression      
    { {       323}, {  63} }, // relational_expression    
    { {       324}, {  68} }, // additive_expression      
    { {       325}, {  69} }, // multiplicative_expression
    { {       326}, { 118} }, // unary_expression         
    { {       327}, {  54} }, // postfix_expression       
    { {       330}, {  55} }, // unary_operator           
    { {       328}, {  57} }, // primary_expression       
    { {       278}, {  58} }, // IDENTIFIER               
    { {        45}, {  59} }, // '-'                      
    { {        33}, {  60} }, // '!'                      
    { {        38}, {  61} }, // '&'                      
    { {        42}, {  62} }, // '*'                      
    { {       285}, {  64} }, // INT_CONSTANT             
    { {       287}, {  65} }, // FLOAT_CONSTANT           
    { {       301}, {  66} }, // STRING_LITERAL           
    { {        40}, {  67} }, // '('                      
    { {         0}, {   0} },                             
};

SR__ s_90[] =
{
    { { REQ_TOKEN}, {  21} },                             
    { {       319}, { 121} }, // expression               
    { {       320}, {  51} }, // logical_or_expression    
    { {       326}, {  52} }, // unary_expression         
    { {       321}, {  53} }, // logical_and_expression   
    { {       327}, {  54} }, // postfix_expression       
    { {       330}, {  55} }, // unary_operator           
    { {       322}, {  56} }, // equality_expression      
    { {       328}, {  57} }, // primary_expression       
    { {       278}, {  58} }, // IDENTIFIER               
    { {        45}, {  59} }, // '-'                      
    { {        33}, {  60} }, // '!'                      
    { {        38}, {  61} }, // '&'                      
    { {        42}, {  62} }, // '*'                      
    { {       323}, {  63} }, // relational_expression    
    { {       285}, {  64} }, // INT_CONSTANT             
    { {       287}, {  65} }, // FLOAT_CONSTANT           
    { {       301}, {  66} }, // STRING_LITERAL           
    { {        40}, {  67} }, // '('                      
    { {       324}, {  68} }, // additive_expression      
    { {       325}, {  69} }, // multiplicative_expression
    { {         0}, {   0} },                             
};

SR__ s_91[] =
{
    { { REQ_TOKEN}, {   2} },              
    { {       278}, { 122} }, // IDENTIFIER
    { {         0}, {   0} },              
};

SR__ s_92[] =
{
    { { REQ_TOKEN}, {   2} },              
    { {       278}, { 123} }, // IDENTIFIER
    { {         0}, {   0} },              
};

SR__ s_93[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -62} }, 
};

SR__ s_94[] =
{
    { { REQ_DEF}, {   5} },          
    { {      91}, {  90} }, // '['   
    { {      46}, {  91} }, // '.'   
    { {     303}, {  92} }, // PTR_OP
    { {     299}, {  93} }, // INC_OP
    { {       0}, { -55} },          
};

SR__ s_95[] =
{
    { { REQ_TOKEN}, {  17} },                             
    { {       323}, { 124} }, // relational_expression    
    { {       324}, {  68} }, // additive_expression      
    { {       325}, {  69} }, // multiplicative_expression
    { {       326}, { 118} }, // unary_expression         
    { {       327}, {  54} }, // postfix_expression       
    { {       330}, {  55} }, // unary_operator           
    { {       328}, {  57} }, // primary_expression       
    { {       278}, {  58} }, // IDENTIFIER               
    { {        45}, {  59} }, // '-'                      
    { {        33}, {  60} }, // '!'                      
    { {        38}, {  61} }, // '&'                      
    { {        42}, {  62} }, // '*'                      
    { {       285}, {  64} }, // INT_CONSTANT             
    { {       287}, {  65} }, // FLOAT_CONSTANT           
    { {       301}, {  66} }, // STRING_LITERAL           
    { {        40}, {  67} }, // '('                      
    { {         0}, {   0} },                             
};

SR__ s_96[] =
{
    { { REQ_TOKEN}, {  17} },                             
    { {       323}, { 125} }, // relational_expression    
    { {       324}, {  68} }, // additive_expression      
    { {       325}, {  69} }, // multiplicative_expression
    { {       326}, { 118} }, // unary_expression         
    { {       327}, {  54} }, // postfix_expression       
    { {       330}, {  55} }, // unary_operator           
    { {       328}, {  57} }, // primary_expression       
    { {       278}, {  58} }, // IDENTIFIER               
    { {        45}, {  59} }, // '-'                      
    { {        33}, {  60} }, // '!'                      
    { {        38}, {  61} }, // '&'                      
    { {        42}, {  62} }, // '*'                      
    { {       285}, {  64} }, // INT_CONSTANT             
    { {       287}, {  65} }, // FLOAT_CONSTANT           
    { {       301}, {  66} }, // STRING_LITERAL           
    { {        40}, {  67} }, // '('                      
    { {         0}, {   0} },                             
};

SR__ s_97[] =
{
    { { REQ_TOKEN}, {  23} },                             
    { {        41}, { 126} }, // ')'                      
    { {       329}, { 127} }, // expression_list          
    { {       319}, { 128} }, // expression               
    { {       320}, {  51} }, // logical_or_expression    
    { {       326}, {  52} }, // unary_expression         
    { {       321}, {  53} }, // logical_and_expression   
    { {       327}, {  54} }, // postfix_expression       
    { {       330}, {  55} }, // unary_operator           
    { {       322}, {  56} }, // equality_expression      
    { {       328}, {  57} }, // primary_expression       
    { {       278}, {  58} }, // IDENTIFIER               
    { {        45}, {  59} }, // '-'                      
    { {        33}, {  60} }, // '!'                      
    { {        38}, {  61} }, // '&'                      
    { {        42}, {  62} }, // '*'                      
    { {       323}, {  63} }, // relational_expression    
    { {       285}, {  64} }, // INT_CONSTANT             
    { {       287}, {  65} }, // FLOAT_CONSTANT           
    { {       301}, {  66} }, // STRING_LITERAL           
    { {        40}, {  67} }, // '('                      
    { {       324}, {  68} }, // additive_expression      
    { {       325}, {  69} }, // multiplicative_expression
    { {         0}, {   0} },                             
};

SR__ s_98[] =
{
    { { REQ_TOKEN}, {  16} },                             
    { {       324}, { 129} }, // additive_expression      
    { {       325}, {  69} }, // multiplicative_expression
    { {       326}, { 118} }, // unary_expression         
    { {       327}, {  54} }, // postfix_expression       
    { {       330}, {  55} }, // unary_operator           
    { {       328}, {  57} }, // primary_expression       
    { {       278}, {  58} }, // IDENTIFIER               
    { {        45}, {  59} }, // '-'                      
    { {        33}, {  60} }, // '!'                      
    { {        38}, {  61} }, // '&'                      
    { {        42}, {  62} }, // '*'                      
    { {       285}, {  64} }, // INT_CONSTANT             
    { {       287}, {  65} }, // FLOAT_CONSTANT           
    { {       301}, {  66} }, // STRING_LITERAL           
    { {        40}, {  67} }, // '('                      
    { {         0}, {   0} },                             
};

SR__ s_99[] =
{
    { { REQ_TOKEN}, {  16} },                             
    { {       324}, { 130} }, // additive_expression      
    { {       325}, {  69} }, // multiplicative_expression
    { {       326}, { 118} }, // unary_expression         
    { {       327}, {  54} }, // postfix_expression       
    { {       330}, {  55} }, // unary_operator           
    { {       328}, {  57} }, // primary_expression       
    { {       278}, {  58} }, // IDENTIFIER               
    { {        45}, {  59} }, // '-'                      
    { {        33}, {  60} }, // '!'                      
    { {        38}, {  61} }, // '&'                      
    { {        42}, {  62} }, // '*'                      
    { {       285}, {  64} }, // INT_CONSTANT             
    { {       287}, {  65} }, // FLOAT_CONSTANT           
    { {       301}, {  66} }, // STRING_LITERAL           
    { {        40}, {  67} }, // '('                      
    { {         0}, {   0} },                             
};

SR__ s_100[] =
{
    { { REQ_TOKEN}, {  16} },                             
    { {       324}, { 131} }, // additive_expression      
    { {       325}, {  69} }, // multiplicative_expression
    { {       326}, { 118} }, // unary_expression         
    { {       327}, {  54} }, // postfix_expression       
    { {       330}, {  55} }, // unary_operator           
    { {       328}, {  57} }, // primary_expression       
    { {       278}, {  58} }, // IDENTIFIER               
    { {        45}, {  59} }, // '-'                      
    { {        33}, {  60} }, // '!'                      
    { {        38}, {  61} }, // '&'                      
    { {        42}, {  62} }, // '*'                      
    { {       285}, {  64} }, // INT_CONSTANT             
    { {       287}, {  65} }, // FLOAT_CONSTANT           
    { {       301}, {  66} }, // STRING_LITERAL           
    { {        40}, {  67} }, // '('                      
    { {         0}, {   0} },                             
};

SR__ s_101[] =
{
    { { REQ_TOKEN}, {  16} },                             
    { {       324}, { 132} }, // additive_expression      
    { {       325}, {  69} }, // multiplicative_expression
    { {       326}, { 118} }, // unary_expression         
    { {       327}, {  54} }, // postfix_expression       
    { {       330}, {  55} }, // unary_operator           
    { {       328}, {  57} }, // primary_expression       
    { {       278}, {  58} }, // IDENTIFIER               
    { {        45}, {  59} }, // '-'                      
    { {        33}, {  60} }, // '!'                      
    { {        38}, {  61} }, // '&'                      
    { {        42}, {  62} }, // '*'                      
    { {       285}, {  64} }, // INT_CONSTANT             
    { {       287}, {  65} }, // FLOAT_CONSTANT           
    { {       301}, {  66} }, // STRING_LITERAL           
    { {        40}, {  67} }, // '('                      
    { {         0}, {   0} },                             
};

SR__ s_102[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        41}, { 133} }, // ')'
    { {         0}, {   0} },       
};

SR__ s_103[] =
{
    { { REQ_TOKEN}, {  15} },                             
    { {       325}, { 134} }, // multiplicative_expression
    { {       326}, { 118} }, // unary_expression         
    { {       327}, {  54} }, // postfix_expression       
    { {       330}, {  55} }, // unary_operator           
    { {       328}, {  57} }, // primary_expression       
    { {       278}, {  58} }, // IDENTIFIER               
    { {        45}, {  59} }, // '-'                      
    { {        33}, {  60} }, // '!'                      
    { {        38}, {  61} }, // '&'                      
    { {        42}, {  62} }, // '*'                      
    { {       285}, {  64} }, // INT_CONSTANT             
    { {       287}, {  65} }, // FLOAT_CONSTANT           
    { {       301}, {  66} }, // STRING_LITERAL           
    { {        40}, {  67} }, // '('                      
    { {         0}, {   0} },                             
};

SR__ s_104[] =
{
    { { REQ_TOKEN}, {  15} },                             
    { {       325}, { 135} }, // multiplicative_expression
    { {       326}, { 118} }, // unary_expression         
    { {       327}, {  54} }, // postfix_expression       
    { {       330}, {  55} }, // unary_operator           
    { {       328}, {  57} }, // primary_expression       
    { {       278}, {  58} }, // IDENTIFIER               
    { {        45}, {  59} }, // '-'                      
    { {        33}, {  60} }, // '!'                      
    { {        38}, {  61} }, // '&'                      
    { {        42}, {  62} }, // '*'                      
    { {       285}, {  64} }, // INT_CONSTANT             
    { {       287}, {  65} }, // FLOAT_CONSTANT           
    { {       301}, {  66} }, // STRING_LITERAL           
    { {        40}, {  67} }, // '('                      
    { {         0}, {   0} },                             
};

SR__ s_105[] =
{
    { { REQ_TOKEN}, {  14} },                      
    { {       326}, { 136} }, // unary_expression  
    { {       327}, {  54} }, // postfix_expression
    { {       330}, {  55} }, // unary_operator    
    { {       328}, {  57} }, // primary_expression
    { {       278}, {  58} }, // IDENTIFIER        
    { {        45}, {  59} }, // '-'               
    { {        33}, {  60} }, // '!'               
    { {        38}, {  61} }, // '&'               
    { {        42}, {  62} }, // '*'               
    { {       285}, {  64} }, // INT_CONSTANT      
    { {       287}, {  65} }, // FLOAT_CONSTANT    
    { {       301}, {  66} }, // STRING_LITERAL    
    { {        40}, {  67} }, // '('               
    { {         0}, {   0} },                      
};

SR__ s_106[] =
{
    { { REQ_TOKEN}, {  14} },                      
    { {       326}, { 137} }, // unary_expression  
    { {       327}, {  54} }, // postfix_expression
    { {       330}, {  55} }, // unary_operator    
    { {       328}, {  57} }, // primary_expression
    { {       278}, {  58} }, // IDENTIFIER        
    { {        45}, {  59} }, // '-'               
    { {        33}, {  60} }, // '!'               
    { {        38}, {  61} }, // '&'               
    { {        42}, {  62} }, // '*'               
    { {       285}, {  64} }, // INT_CONSTANT      
    { {       287}, {  65} }, // FLOAT_CONSTANT    
    { {       301}, {  66} }, // STRING_LITERAL    
    { {        40}, {  67} }, // '('               
    { {         0}, {   0} },                      
};

SR__ s_107[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -17} }, 
};

SR__ s_108[] =
{
    { { REQ_DEF}, {   2} },       
    { {      91}, {  76} }, // '['
    { {       0}, { -81} },       
};

SR__ s_109[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        93}, { 138} }, // ']'
    { {         0}, {   0} },       
};

SR__ s_110[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -63} }, 
};

SR__ s_111[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -24} }, 
};

SR__ s_112[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -27} }, 
};

SR__ s_113[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -31} }, 
};

SR__ s_114[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        41}, { 139} }, // ')'
    { {         0}, {   0} },       
};

SR__ s_115[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        41}, { 140} }, // ')'
    { {         0}, {   0} },       
};

SR__ s_116[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        59}, { 141} }, // ';'
    { {         0}, {   0} },       
};

SR__ s_117[] =
{
    { { REQ_DEF}, {   2} },          
    { {     297}, {  89} }, // AND_OP
    { {       0}, { -37} },          
};

SR__ s_118[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -51} }, 
};

SR__ s_119[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -35} }, 
};

SR__ s_120[] =
{
    { { REQ_DEF}, {   3} },         
    { {     296}, {  95} }, // EQ_OP
    { {     295}, {  96} }, // NE_OP
    { {       0}, { -39} },         
};

SR__ s_121[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        93}, { 142} }, // ']'
    { {         0}, {   0} },       
};

SR__ s_122[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -60} }, 
};

SR__ s_123[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -61} }, 
};

SR__ s_124[] =
{
    { { REQ_DEF}, {   5} },         
    { {      60}, {  98} }, // '<'  
    { {      62}, {  99} }, // '>'  
    { {     293}, { 100} }, // LE_OP
    { {     294}, { 101} }, // GE_OP
    { {       0}, { -41} },         
};

SR__ s_125[] =
{
    { { REQ_DEF}, {   5} },         
    { {      60}, {  98} }, // '<'  
    { {      62}, {  99} }, // '>'  
    { {     293}, { 100} }, // LE_OP
    { {     294}, { 101} }, // GE_OP
    { {       0}, { -42} },         
};

SR__ s_126[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -57} }, 
};

SR__ s_127[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {        41}, { 143} }, // ')'
    { {        44}, { 144} }, // ','
    { {         0}, {   0} },       
};

SR__ s_128[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -68} }, 
};

SR__ s_129[] =
{
    { { REQ_DEF}, {   3} },       
    { {      43}, { 103} }, // '+'
    { {      45}, { 104} }, // '-'
    { {       0}, { -44} },       
};

SR__ s_130[] =
{
    { { REQ_DEF}, {   3} },       
    { {      43}, { 103} }, // '+'
    { {      45}, { 104} }, // '-'
    { {       0}, { -45} },       
};

SR__ s_131[] =
{
    { { REQ_DEF}, {   3} },       
    { {      43}, { 103} }, // '+'
    { {      45}, { 104} }, // '-'
    { {       0}, { -46} },       
};

SR__ s_132[] =
{
    { { REQ_DEF}, {   3} },       
    { {      43}, { 103} }, // '+'
    { {      45}, { 104} }, // '-'
    { {       0}, { -47} },       
};

SR__ s_133[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -67} }, 
};

SR__ s_134[] =
{
    { { REQ_DEF}, {   3} },       
    { {      42}, { 105} }, // '*'
    { {      47}, { 106} }, // '/'
    { {       0}, { -49} },       
};

SR__ s_135[] =
{
    { { REQ_DEF}, {   3} },       
    { {      42}, { 105} }, // '*'
    { {      47}, { 106} }, // '/'
    { {       0}, { -50} },       
};

SR__ s_136[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -52} }, 
};

SR__ s_137[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -53} }, 
};

SR__ s_138[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -20} }, 
};

SR__ s_139[] =
{
    { { REQ_TOKEN}, {  31} },                             
    { {       317}, { 145} }, // statement                
    { {       123}, {  41} }, // '{'                      
    { {       331}, {  42} }, // selection_statement      
    { {       332}, {  43} }, // iteration_statement      
    { {       318}, {  44} }, // assignment_statement     
    { {       292}, {  45} }, // RETURN                   
    { {       288}, {  46} }, // IF                       
    { {       290}, {  47} }, // WHILE                    
    { {       291}, {  48} }, // FOR                      
    { {        59}, {  49} }, // ';'                      
    { {       319}, {  50} }, // expression               
    { {       320}, {  51} }, // logical_or_expression    
    { {       326}, {  52} }, // unary_expression         
    { {       321}, {  53} }, // logical_and_expression   
    { {       327}, {  54} }, // postfix_expression       
    { {       330}, {  55} }, // unary_operator           
    { {       322}, {  56} }, // equality_expression      
    { {       328}, {  57} }, // primary_expression       
    { {       278}, {  58} }, // IDENTIFIER               
    { {        45}, {  59} }, // '-'                      
    { {        33}, {  60} }, // '!'                      
    { {        38}, {  61} }, // '&'                      
    { {        42}, {  62} }, // '*'                      
    { {       323}, {  63} }, // relational_expression    
    { {       285}, {  64} }, // INT_CONSTANT             
    { {       287}, {  65} }, // FLOAT_CONSTANT           
    { {       301}, {  66} }, // STRING_LITERAL           
    { {        40}, {  67} }, // '('                      
    { {       324}, {  68} }, // additive_expression      
    { {       325}, {  69} }, // multiplicative_expression
    { {         0}, {   0} },                             
};

SR__ s_140[] =
{
    { { REQ_TOKEN}, {  31} },                             
    { {       317}, { 146} }, // statement                
    { {       123}, {  41} }, // '{'                      
    { {       331}, {  42} }, // selection_statement      
    { {       332}, {  43} }, // iteration_statement      
    { {       318}, {  44} }, // assignment_statement     
    { {       292}, {  45} }, // RETURN                   
    { {       288}, {  46} }, // IF                       
    { {       290}, {  47} }, // WHILE                    
    { {       291}, {  48} }, // FOR                      
    { {        59}, {  49} }, // ';'                      
    { {       319}, {  50} }, // expression               
    { {       320}, {  51} }, // logical_or_expression    
    { {       326}, {  52} }, // unary_expression         
    { {       321}, {  53} }, // logical_and_expression   
    { {       327}, {  54} }, // postfix_expression       
    { {       330}, {  55} }, // unary_operator           
    { {       322}, {  56} }, // equality_expression      
    { {       328}, {  57} }, // primary_expression       
    { {       278}, {  58} }, // IDENTIFIER               
    { {        45}, {  59} }, // '-'                      
    { {        33}, {  60} }, // '!'                      
    { {        38}, {  61} }, // '&'                      
    { {        42}, {  62} }, // '*'                      
    { {       323}, {  63} }, // relational_expression    
    { {       285}, {  64} }, // INT_CONSTANT             
    { {       287}, {  65} }, // FLOAT_CONSTANT           
    { {       301}, {  66} }, // STRING_LITERAL           
    { {        40}, {  67} }, // '('                      
    { {       324}, {  68} }, // additive_expression      
    { {       325}, {  69} }, // multiplicative_expression
    { {         0}, {   0} },                             
};

SR__ s_141[] =
{
    { { REQ_TOKEN}, {  21} },                             
    { {       319}, { 147} }, // expression               
    { {       320}, {  51} }, // logical_or_expression    
    { {       326}, {  52} }, // unary_expression         
    { {       321}, {  53} }, // logical_and_expression   
    { {       327}, {  54} }, // postfix_expression       
    { {       330}, {  55} }, // unary_operator           
    { {       322}, {  56} }, // equality_expression      
    { {       328}, {  57} }, // primary_expression       
    { {       278}, {  58} }, // IDENTIFIER               
    { {        45}, {  59} }, // '-'                      
    { {        33}, {  60} }, // '!'                      
    { {        38}, {  61} }, // '&'                      
    { {        42}, {  62} }, // '*'                      
    { {       323}, {  63} }, // relational_expression    
    { {       285}, {  64} }, // INT_CONSTANT             
    { {       287}, {  65} }, // FLOAT_CONSTANT           
    { {       301}, {  66} }, // STRING_LITERAL           
    { {        40}, {  67} }, // '('                      
    { {       324}, {  68} }, // additive_expression      
    { {       325}, {  69} }, // multiplicative_expression
    { {         0}, {   0} },                             
};

SR__ s_142[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -59} }, 
};

SR__ s_143[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -58} }, 
};

SR__ s_144[] =
{
    { { REQ_TOKEN}, {  21} },                             
    { {       319}, { 148} }, // expression               
    { {       320}, {  51} }, // logical_or_expression    
    { {       326}, {  52} }, // unary_expression         
    { {       321}, {  53} }, // logical_and_expression   
    { {       327}, {  54} }, // postfix_expression       
    { {       330}, {  55} }, // unary_operator           
    { {       322}, {  56} }, // equality_expression      
    { {       328}, {  57} }, // primary_expression       
    { {       278}, {  58} }, // IDENTIFIER               
    { {        45}, {  59} }, // '-'                      
    { {        33}, {  60} }, // '!'                      
    { {        38}, {  61} }, // '&'                      
    { {        42}, {  62} }, // '*'                      
    { {       323}, {  63} }, // relational_expression    
    { {       285}, {  64} }, // INT_CONSTANT             
    { {       287}, {  65} }, // FLOAT_CONSTANT           
    { {       301}, {  66} }, // STRING_LITERAL           
    { {        40}, {  67} }, // '('                      
    { {       324}, {  68} }, // additive_expression      
    { {       325}, {  69} }, // multiplicative_expression
    { {         0}, {   0} },                             
};

SR__ s_145[] =
{
    { { REQ_TOKEN}, {   2} },        
    { {       289}, { 149} }, // ELSE
    { {         0}, {   0} },        
};

SR__ s_146[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -75} }, 
};

SR__ s_147[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        59}, { 150} }, // ';'
    { {         0}, {   0} },       
};

SR__ s_148[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -69} }, 
};

SR__ s_149[] =
{
    { { REQ_TOKEN}, {  31} },                             
    { {       317}, { 151} }, // statement                
    { {       123}, {  41} }, // '{'                      
    { {       331}, {  42} }, // selection_statement      
    { {       332}, {  43} }, // iteration_statement      
    { {       318}, {  44} }, // assignment_statement     
    { {       292}, {  45} }, // RETURN                   
    { {       288}, {  46} }, // IF                       
    { {       290}, {  47} }, // WHILE                    
    { {       291}, {  48} }, // FOR                      
    { {        59}, {  49} }, // ';'                      
    { {       319}, {  50} }, // expression               
    { {       320}, {  51} }, // logical_or_expression    
    { {       326}, {  52} }, // unary_expression         
    { {       321}, {  53} }, // logical_and_expression   
    { {       327}, {  54} }, // postfix_expression       
    { {       330}, {  55} }, // unary_operator           
    { {       322}, {  56} }, // equality_expression      
    { {       328}, {  57} }, // primary_expression       
    { {       278}, {  58} }, // IDENTIFIER               
    { {        45}, {  59} }, // '-'                      
    { {        33}, {  60} }, // '!'                      
    { {        38}, {  61} }, // '&'                      
    { {        42}, {  62} }, // '*'                      
    { {       323}, {  63} }, // relational_expression    
    { {       285}, {  64} }, // INT_CONSTANT             
    { {       287}, {  65} }, // FLOAT_CONSTANT           
    { {       301}, {  66} }, // STRING_LITERAL           
    { {        40}, {  67} }, // '('                      
    { {       324}, {  68} }, // additive_expression      
    { {       325}, {  69} }, // multiplicative_expression
    { {         0}, {   0} },                             
};

SR__ s_150[] =
{
    { { REQ_TOKEN}, {  21} },                             
    { {       319}, { 152} }, // expression               
    { {       320}, {  51} }, // logical_or_expression    
    { {       326}, {  52} }, // unary_expression         
    { {       321}, {  53} }, // logical_and_expression   
    { {       327}, {  54} }, // postfix_expression       
    { {       330}, {  55} }, // unary_operator           
    { {       322}, {  56} }, // equality_expression      
    { {       328}, {  57} }, // primary_expression       
    { {       278}, {  58} }, // IDENTIFIER               
    { {        45}, {  59} }, // '-'                      
    { {        33}, {  60} }, // '!'                      
    { {        38}, {  61} }, // '&'                      
    { {        42}, {  62} }, // '*'                      
    { {       323}, {  63} }, // relational_expression    
    { {       285}, {  64} }, // INT_CONSTANT             
    { {       287}, {  65} }, // FLOAT_CONSTANT           
    { {       301}, {  66} }, // STRING_LITERAL           
    { {        40}, {  67} }, // '('                      
    { {       324}, {  68} }, // additive_expression      
    { {       325}, {  69} }, // multiplicative_expression
    { {         0}, {   0} },                             
};

SR__ s_151[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -74} }, 
};

SR__ s_152[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        41}, { 153} }, // ')'
    { {         0}, {   0} },       
};

SR__ s_153[] =
{
    { { REQ_TOKEN}, {  31} },                             
    { {       317}, { 154} }, // statement                
    { {       123}, {  41} }, // '{'                      
    { {       331}, {  42} }, // selection_statement      
    { {       332}, {  43} }, // iteration_statement      
    { {       318}, {  44} }, // assignment_statement     
    { {       292}, {  45} }, // RETURN                   
    { {       288}, {  46} }, // IF                       
    { {       290}, {  47} }, // WHILE                    
    { {       291}, {  48} }, // FOR                      
    { {        59}, {  49} }, // ';'                      
    { {       319}, {  50} }, // expression               
    { {       320}, {  51} }, // logical_or_expression    
    { {       326}, {  52} }, // unary_expression         
    { {       321}, {  53} }, // logical_and_expression   
    { {       327}, {  54} }, // postfix_expression       
    { {       330}, {  55} }, // unary_operator           
    { {       322}, {  56} }, // equality_expression      
    { {       328}, {  57} }, // primary_expression       
    { {       278}, {  58} }, // IDENTIFIER               
    { {        45}, {  59} }, // '-'                      
    { {        33}, {  60} }, // '!'                      
    { {        38}, {  61} }, // '&'                      
    { {        42}, {  62} }, // '*'                      
    { {       323}, {  63} }, // relational_expression    
    { {       285}, {  64} }, // INT_CONSTANT             
    { {       287}, {  65} }, // FLOAT_CONSTANT           
    { {       301}, {  66} }, // STRING_LITERAL           
    { {        40}, {  67} }, // '('                      
    { {       324}, {  68} }, // additive_expression      
    { {       325}, {  69} }, // multiplicative_expression
    { {         0}, {   0} },                             
};

SR__ s_154[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -76} }, 
};


// State array:
SR__ *s_state[] =
{
  s_0,  s_1,  s_2,  s_3,  s_4,  s_5,  s_6,  s_7,  s_8,  s_9,
  s_10,  s_11,  s_12,  s_13,  s_14,  s_15,  s_16,  s_17,  s_18,  s_19,
  s_20,  s_21,  s_22,  s_23,  s_24,  s_25,  s_26,  s_27,  s_28,  s_29,
  s_30,  s_31,  s_32,  s_33,  s_34,  s_35,  s_36,  s_37,  s_38,  s_39,
  s_40,  s_41,  s_42,  s_43,  s_44,  s_45,  s_46,  s_47,  s_48,  s_49,
  s_50,  s_51,  s_52,  s_53,  s_54,  s_55,  s_56,  s_57,  s_58,  s_59,
  s_60,  s_61,  s_62,  s_63,  s_64,  s_65,  s_66,  s_67,  s_68,  s_69,
  s_70,  s_71,  s_72,  s_73,  s_74,  s_75,  s_76,  s_77,  s_78,  s_79,
  s_80,  s_81,  s_82,  s_83,  s_84,  s_85,  s_86,  s_87,  s_88,  s_89,
  s_90,  s_91,  s_92,  s_93,  s_94,  s_95,  s_96,  s_97,  s_98,  s_99,
  s_100,  s_101,  s_102,  s_103,  s_104,  s_105,  s_106,  s_107,  s_108,  s_109,
  s_110,  s_111,  s_112,  s_113,  s_114,  s_115,  s_116,  s_117,  s_118,  s_119,
  s_120,  s_121,  s_122,  s_123,  s_124,  s_125,  s_126,  s_127,  s_128,  s_129,
  s_130,  s_131,  s_132,  s_133,  s_134,  s_135,  s_136,  s_137,  s_138,  s_139,
  s_140,  s_141,  s_142,  s_143,  s_144,  s_145,  s_146,  s_147,  s_148,  s_149,
  s_150,  s_151,  s_152,  s_153,  s_154,
};

} // anonymous namespace ends



// If the parsing function call uses arguments, then provide an overloaded
// function.  The code below doesn't rely on parameters, so no arguments are
// required.  Furthermore, parse uses a function try block to allow us to do
// ACCEPT and ABORT from anywhere, even from within members called by actions,
// simply throwing the appropriate exceptions.

ParserBase::ParserBase()
:
    d_stackIdx__(-1),
    // $insert debuginit
    d_debug__(false),
    d_nErrors__(0),
    // $insert requiredtokens
    d_requiredTokens__(0),
    d_acceptedTokens__(d_requiredTokens__),
    d_token__(_UNDETERMINED_),
    d_nextToken__(_UNDETERMINED_)
{}


Meta__::SType ParserBase::d_val__; 
void Parser::print__()
{
// $insert print
}

void ParserBase::clearin()
{
    d_token__ = d_nextToken__ = _UNDETERMINED_;
}

void ParserBase::push__(size_t state)
{
    if (static_cast<size_t>(d_stackIdx__ + 1) == d_stateStack__.size())
    {
        size_t newSize = d_stackIdx__ + STACK_EXPANSION;
        d_stateStack__.resize(newSize);
        d_valueStack__.resize(newSize);
    }
    ++d_stackIdx__;
    d_stateStack__[d_stackIdx__] = d_state__ = state;
    *(d_vsp__ = &d_valueStack__[d_stackIdx__]) = d_val__;
}

void ParserBase::popToken__()
{
    d_token__ = d_nextToken__;

    d_val__ = d_nextVal__;
    d_nextVal__ = STYPE__();

    d_nextToken__ = _UNDETERMINED_;
}
     
void ParserBase::pushToken__(int token)
{
    d_nextToken__ = d_token__;
    d_nextVal__ = d_val__;
    d_token__ = token;
}
     
void ParserBase::pop__(size_t count)
{
    if (d_stackIdx__ < static_cast<int>(count))
    {
        ABORT();
    }

    d_stackIdx__ -= count;
    d_state__ = d_stateStack__[d_stackIdx__];
    d_vsp__ = &d_valueStack__[d_stackIdx__];
}

inline size_t ParserBase::top__() const
{
    return d_stateStack__[d_stackIdx__];
}

void Parser::executeAction(int production)
try
{
    if (d_token__ != _UNDETERMINED_)
        pushToken__(d_token__);     // save an already available token

                                    // save default non-nested block $$
    if (int size = s_productionInfo[production].d_size)
        d_val__ = d_vsp__[1 - size];

    switch (production)
    {
        // $insert actioncases
        
        case 1:
#line 24 "parse.y"
        {
         print_symtab_ast(); 
         
         
         }
        break;

        case 2:
#line 34 "parse.y"
        { 
         abstract_astnode *a = new AST_EMPTY();
         abstract_astnode *b = new AST_GROUP();
         b->pushAST(a);
         d_val__.get<Tag__::ABS>() = b;
         }
        break;

        case 3:
#line 41 "parse.y"
        {
         abstract_astnode *f = d_vsp__[0].data<Tag__::ABS>();
         abstract_astnode *b = new AST_GROUP();
         b->pushAST(f);
         d_val__.get<Tag__::ABS>() = b;
         }
        break;

        case 4:
#line 48 "parse.y"
        {
         abstract_astnode *f = d_vsp__[0].data<Tag__::ABS>();
         d_vsp__[-1].data<Tag__::ABS>()->pushAST(f);
         d_val__.get<Tag__::ABS>() = d_vsp__[-1].data<Tag__::ABS>();
         }
        break;

        case 5:
#line 54 "parse.y"
        { 
         abstract_astnode *a = new AST_EMPTY();
         d_vsp__[-1].data<Tag__::ABS>()->pushAST(a);
         d_val__.get<Tag__::ABS>() = d_vsp__[-1].data<Tag__::ABS>();
         }
        break;

        case 6:
#line 63 "parse.y"
        {
         line_num = d_scanner.lineNr();
         SymRow * a = new SymRow();
         a->symName = d_vsp__[-4].data<Tag__::TEXT>();
         a->var_fun = 2; 
         a->head = NULL; 
         a->tail = NULL;
         a->param_local = -1;
         a->symTab = localSymTab;
         
         a->size = 0;
         map<string, SymRow *> :: iterator beg = localSymTab->sym_rows.begin();
         while(beg != localSymTab->sym_rows.end()){ 
         a->size += (beg->second)->size;
         beg++;
         }
         int err = globalSymTab->insertRow("struct " + a->symName, a);
         if(err == -1){
         print_error(-1, ""); 
         }
         localSymTab = new SymTab();
         para_index = 1;
         global_offset = 0;
         ret_type = "";
         curr_fn = "";
         }
        break;

        case 7:
#line 100 "parse.y"
        {
         line_num = d_scanner.lineNr();
         SymRow * a = d_vsp__[-2].data<Tag__::SYMROW>();
         std::pair<string,int> dec_type = d_vsp__[-3].data<Tag__::TYPEPAIR>();
         
         
         
         int local_stack = generate_code_fn_init(a->symName);
         next_label_stack.push(label_count);
         label_count++;
         d_vsp__[0].data<Tag__::ABS>()->generate_code(1);
         label_count--;
         cout << "$L" << next_label_stack.top() << ":" << endl;
         next_label_stack.pop(); 
         generate_code_fn_end(local_stack); 
         
         localSymTab = new SymTab(); 
         para_index = 1;
         global_offset = 0;
         ret_type = ""; 
         curr_fn = "";
         d_val__.get<Tag__::ABS>() = d_vsp__[0].data<Tag__::ABS>();
         }
        break;

        case 8:
#line 94 "parse.y"
        d_val__ = d_vsp__[-1];
        {
         line_num = d_scanner.lineNr();
         SymRow * a = d_vsp__[0].data<Tag__::SYMROW>();
         a->size = get_base_size(a->tail);
         }
        break;

        case 9:
#line 129 "parse.y"
        { 
         string a = "void";
         if(ret_type == "")
         ret_type = "void"; 
         int t_size = 1;
         d_val__.get<Tag__::TYPEPAIR>() = make_pair(a, t_size);
         }
        break;

        case 10:
#line 138 "parse.y"
        {
         string a = "int";
         if(ret_type == "")
         ret_type = "int";
         int t_size = 4;
         d_val__.get<Tag__::TYPEPAIR>() = make_pair(a, t_size);
         }
        break;

        case 11:
#line 147 "parse.y"
        {
         string a = "float";
         if(ret_type == "")
         ret_type = "float";
         int t_size = 4;
         d_val__.get<Tag__::TYPEPAIR>() = make_pair(a, t_size);
         }
        break;

        case 12:
#line 156 "parse.y"
        {
         string struct_name = d_vsp__[0].data<Tag__::TEXT>();
         if(ret_type == "")
         ret_type = "struct " + struct_name;
         int t_size = 1;
         d_val__.get<Tag__::TYPEPAIR>() = make_pair("struct "+ struct_name, t_size); 
         }
        break;

        case 13:
#line 167 "parse.y"
        {
         line_num = d_scanner.lineNr();
         SymRow * a = new SymRow();
         a->head = a->tail = new var_type(ret_type);
         a->symName = d_vsp__[-3].data<Tag__::TEXT>();
         a->var_fun = 1;
         a->param_local = -1;
         a->symTab = localSymTab;
         global_offset = -4; 
         
         
         int err = globalSymTab->insertRow(a->symName, a);
         if(err == -1){
         print_error(-1, "");
         }
         curr_fn = a->symName; 
         
         d_val__.get<Tag__::SYMROW>() = a; 
         }
        break;

        case 14:
#line 188 "parse.y"
        {
         line_num = d_scanner.lineNr();
         SymRow * a = new SymRow();
         a->head = a->tail = new var_type(ret_type);
         a->symName = d_vsp__[-2].data<Tag__::TEXT>();
         a->var_fun = 1;
         a->param_local = -1;
         a->symTab = localSymTab;
         global_offset = -4; 
         
         
         int err = globalSymTab->insertRow(a->symName, a);
         if(err == -1){
         print_error(-1, "");
         }
         curr_fn = a->symName; 
         
         d_val__.get<Tag__::SYMROW>() = a; 
         }
        break;

        case 15:
#line 209 "parse.y"
        {
         SymRow * a = d_vsp__[0].data<Tag__::SYMROW>();
         ret_type = ret_type+"*";
         (a->head)->t = (a->head)->t + "*";
         a->tail = a->head;
         d_val__.get<Tag__::SYMROW>() = a; 
         }
        break;

        case 16:
#line 220 "parse.y"
        {
         }
        break;

        case 17:
#line 223 "parse.y"
        {
         }
        break;

        case 18:
#line 229 "parse.y"
        {
         line_num = d_scanner.lineNr();
         std::pair<string,int> dec_type = d_vsp__[-1].data<Tag__::TYPEPAIR>();
         SymRow * dec = d_vsp__[0].data<Tag__::SYMROW>();
         
         
         if(dec->head == NULL){
         var_type *tp = new var_type(dec_type.first);
         dec->head = dec->tail = tp;
         }
         else{
         if((dec->tail)->t[0] == '*'){ 
         (dec->tail)->t = dec_type.first + (dec->tail)->t;
         }
         else{
         var_type *tp = new var_type(dec_type.first);
         (dec->tail)->type = tp;
         dec->tail = tp;
         }
         }
         
         
         
         
         
         
         
         
         string type = get_type(dec->head, "");
         if((type.substr(0,6) == "struct") && (rem_base_type(type) == "")){
         dec->size = get_base_size(dec->head);
         }
         else{
         dec->size = 4;
         }
         if(get_type(dec->tail, "") == "void"){ 
         print_error(-2, ""); 
         }
         
         else{
         dec->offset = global_offset + dec->size;
         dec->param_local = para_index++;
         dec->symTab = NULL;
         int err = localSymTab->insertRow(dec->symName, dec);
         if(err == -1){
         print_error(-1, dec->symName);
         }
         else{ 
         global_offset = global_offset + dec->size;
         }
         }
         }
        break;

        case 19:
#line 286 "parse.y"
        { 
         SymRow * dec = new SymRow();
         dec->symName = d_vsp__[0].data<Tag__::TEXT>();
         dec->size = 1;
         dec->head = dec->tail = NULL;
         d_val__.get<Tag__::SYMROW>() = dec;
         }
        break;

        case 20:
#line 294 "parse.y"
        {
         line_num = d_scanner.lineNr();
         
         int bnd;
         SymRow * dec;
         ExpAst * prim = d_vsp__[-1].data<Tag__::EXP>();
         if(prim->only_int == false){
         print_error(-5, ""); 
         }
         else{
         if(prim->int_value < 0){
         print_error(-6, ""); 
         }
         else{
         bnd = prim->int_value;
         string s = std::to_string(bnd);
         dec = d_vsp__[-3].data<Tag__::SYMROW>();
         var_type *tp = new var_type(s);
         if(dec->head == NULL){
         dec->head = dec->tail = tp;
         }
         else{
         (dec->tail)->type = tp;
         dec->tail = tp;
         }
         dec->size = dec->size * bnd; 
         }
         }
         d_val__.get<Tag__::SYMROW>() = dec;
         }
        break;

        case 21:
#line 326 "parse.y"
        {
         SymRow * dec = d_vsp__[0].data<Tag__::SYMROW>();
         if(dec->head == NULL){
         var_type *tp = new var_type("*");
         dec->head = dec->tail = tp;
         }
         else{
         if(((dec->tail)->t)[0] == '*'){
         (dec->tail)->t = (dec->tail)->t + "*";
         }
         else{
         var_type *tp = new var_type("*");
         (dec->tail)->type = tp;
         dec->tail = tp;
         }
         }
         d_val__.get<Tag__::SYMROW>() = dec;
         }
        break;

        case 22:
#line 348 "parse.y"
        {
         StmtAst *s = new EMPTY();
         abstract_astnode *a = new BLOCK_STMT(s);
         d_val__.get<Tag__::ABS>() = a;
         }
        break;

        case 23:
#line 354 "parse.y"
        {
         abstract_astnode *a = new BLOCK_STMT(d_vsp__[-1].data<Tag__::STMT>());
         d_val__.get<Tag__::ABS>() = a;
         }
        break;

        case 24:
#line 359 "parse.y"
        {
         
         abstract_astnode *a = new BLOCK_STMT(d_vsp__[-1].data<Tag__::STMT>());
         d_val__.get<Tag__::ABS>() = a;
         }
        break;

        case 25:
#line 368 "parse.y"
        {
         StmtAst *a = new STMT_GROUP();
         a->pushSt(d_vsp__[0].data<Tag__::STMT>());
         d_val__.get<Tag__::STMT>() = a;
         }
        break;

        case 26:
#line 374 "parse.y"
        {
         d_vsp__[-1].data<Tag__::STMT>()->pushSt(d_vsp__[0].data<Tag__::STMT>());
         d_val__.get<Tag__::STMT>() = d_vsp__[-1].data<Tag__::STMT>();
         }
        break;

        case 27:
#line 382 "parse.y"
        {
         StmtAst *a = new BLOCK_STMT(d_vsp__[-1].data<Tag__::STMT>());
         d_val__.get<Tag__::STMT>() = a;
         }
        break;

        case 28:
#line 387 "parse.y"
        {
         d_val__.get<Tag__::STMT>() = d_vsp__[0].data<Tag__::STMT>();
         }
        break;

        case 29:
#line 391 "parse.y"
        {
         d_val__.get<Tag__::STMT>() = d_vsp__[0].data<Tag__::STMT>();
         }
        break;

        case 30:
#line 395 "parse.y"
        {
         d_val__.get<Tag__::STMT>() = d_vsp__[0].data<Tag__::STMT>();
         }
        break;

        case 31:
#line 399 "parse.y"
        {
         line_num = d_scanner.lineNr();
         ExpAst * expr = d_vsp__[-1].data<Tag__::EXP>();
         var_type * ret = ((globalSymTab->sym_rows.find(curr_fn))->second)->head;
         if(!type_match(ret, expr->type))
         print_error(-71, ""); 
         casting_assign(ret, expr);
         StmtAst *a = new RETN(expr);
         d_val__.get<Tag__::STMT>() = a;
         }
        break;

        case 32:
#line 413 "parse.y"
        {
         StmtAst *a = new EMPTY();
         d_val__.get<Tag__::STMT>() = a;
         }
        break;

        case 33:
#line 418 "parse.y"
        {
         ExpAst * expr = d_vsp__[-1].data<Tag__::EXP>();
         StmtAst *a = new EXPR_STMT(expr);
         
         
         
         
         d_val__.get<Tag__::STMT>() = a;
         }
        break;

        case 34:
#line 431 "parse.y"
        {
         d_val__.get<Tag__::EXP>() = d_vsp__[0].data<Tag__::EXP>();
         }
        break;

        case 35:
#line 435 "parse.y"
        {
         line_num = d_scanner.lineNr();
         ExpAst* unary = d_vsp__[-2].data<Tag__::EXP>();
         ExpAst* expr = d_vsp__[0].data<Tag__::EXP>();
         ExpAst * a = new EXP_ASSIGN(unary, expr);
         if(unary->ltype == false){
         print_error(-61, ""); 
         }
         a->type = valid_assign(unary->type, expr);
         casting_assign(unary->type, expr);
         a->ltype = false;
         d_val__.get<Tag__::EXP>() = a;
         }
        break;

        case 36:
#line 452 "parse.y"
        {
         d_val__.get<Tag__::EXP>() = d_vsp__[0].data<Tag__::EXP>();
         }
        break;

        case 37:
#line 456 "parse.y"
        {
         line_num = d_scanner.lineNr();
         ExpAst *logic = d_vsp__[-2].data<Tag__::EXP>();
         ExpAst *eq = d_vsp__[0].data<Tag__::EXP>();
         int c = casting_binary(logic, eq); 
         string bin_op = "OR_OP";
         switch(c){
         case 2: 
         bin_op = bin_op + "-FLOAT";
         break;
         case 1:
         bin_op = bin_op + "-INT";
         break;
         }
         ExpAst *a = new BIN_OP(bin_op, logic, eq);
         a->type = result_type(logic->type, eq->type, 0);
         a->ltype = false;
         a->only_int = logic->only_int && eq->only_int;
         a->int_value = logic->int_value || eq->int_value; 
         d_val__.get<Tag__::EXP>() = a;
         }
        break;

        case 38:
#line 481 "parse.y"
        {
         d_val__.get<Tag__::EXP>() = d_vsp__[0].data<Tag__::EXP>();
         }
        break;

        case 39:
#line 485 "parse.y"
        {
         line_num = d_scanner.lineNr();
         ExpAst *logic = d_vsp__[-2].data<Tag__::EXP>();
         ExpAst *eq = d_vsp__[0].data<Tag__::EXP>();
         int c = casting_binary(logic, eq); 
         string bin_op = "AND_OP";
         switch(c){
         case 2: 
         bin_op = bin_op + "-FLOAT";
         break;
         case 1:
         bin_op = bin_op + "-INT";
         break;
         }
         ExpAst *a = new BIN_OP(bin_op, logic, eq);
         a->type = result_type(logic->type, eq->type, 0);
         a->ltype = false;
         a->only_int = logic->only_int && eq->only_int;
         a->int_value = logic->int_value && eq->int_value; 
         d_val__.get<Tag__::EXP>() = a;
         }
        break;

        case 40:
#line 510 "parse.y"
        {
         d_val__.get<Tag__::EXP>() = d_vsp__[0].data<Tag__::EXP>();
         }
        break;

        case 41:
#line 514 "parse.y"
        {
         line_num = d_scanner.lineNr();
         ExpAst * eq = d_vsp__[-2].data<Tag__::EXP>();
         ExpAst * rel = d_vsp__[0].data<Tag__::EXP>();
         int c = casting_binary(eq, rel); 
         string bin_op = "EQ_OP";
         switch(c){
         case 2: 
         bin_op = bin_op + "-FLOAT";
         break;
         case 1:
         bin_op = bin_op + "-INT";
         break;
         }
         ExpAst *a = new BIN_OP(bin_op, eq, rel);
         a->type = result_type(eq->type, rel->type, 1);
         a->ltype = false;
         a->only_int = eq->only_int && rel->only_int;
         a->int_value = eq->int_value == rel->int_value; 
         d_val__.get<Tag__::EXP>() = a;
         }
        break;

        case 42:
#line 536 "parse.y"
        {
         line_num = d_scanner.lineNr();
         ExpAst * eq = d_vsp__[-2].data<Tag__::EXP>();
         ExpAst * rel = d_vsp__[0].data<Tag__::EXP>();
         int c = casting_binary(eq, rel); 
         string bin_op = "NE_OP";
         switch(c){
         case 2: 
         bin_op = bin_op + "-FLOAT";
         break;
         case 1:
         bin_op = bin_op + "-INT";
         break;
         }
         ExpAst *a = new BIN_OP("NE_OP", eq, rel);
         a->type = result_type(eq->type, rel->type, 1);
         a->ltype = false;
         a->only_int = eq->only_int && rel->only_int;
         a->int_value = eq->int_value != rel->int_value; 
         d_val__.get<Tag__::EXP>() = a;
         }
        break;

        case 43:
#line 561 "parse.y"
        {
         d_val__.get<Tag__::EXP>() = d_vsp__[0].data<Tag__::EXP>();
         }
        break;

        case 44:
#line 565 "parse.y"
        {
         line_num = d_scanner.lineNr();
         ExpAst *rel = d_vsp__[-2].data<Tag__::EXP>();
         ExpAst *add = d_vsp__[0].data<Tag__::EXP>();
         int c = casting_binary(rel, add); 
         string bin_op = "LT";
         switch(c){
         case 2: 
         bin_op = bin_op + "-FLOAT";
         break;
         case 1:
         bin_op = bin_op + "-INT";
         break;
         }
         ExpAst *a = new BIN_OP(bin_op, rel, add);
         a->type = result_type(rel->type, add->type, 2);
         a->ltype = false;
         a->only_int = rel->only_int && add->only_int;
         a->int_value = rel->int_value < add->int_value; 
         d_val__.get<Tag__::EXP>() = a;
         }
        break;

        case 45:
#line 587 "parse.y"
        {
         line_num = d_scanner.lineNr();
         ExpAst *rel = d_vsp__[-2].data<Tag__::EXP>();
         ExpAst *add = d_vsp__[0].data<Tag__::EXP>();
         int c = casting_binary(rel, add); 
         string bin_op = "GT";
         switch(c){
         case 2: 
         bin_op = bin_op + "-FLOAT";
         break;
         case 1:
         bin_op = bin_op + "-INT";
         break;
         }
         ExpAst *a = new BIN_OP(bin_op, rel, add);
         a->type = result_type(rel->type, add->type, 2);
         a->ltype = false;
         a->only_int = rel->only_int && add->only_int;
         a->int_value = rel->int_value > add->int_value; 
         d_val__.get<Tag__::EXP>() = a;
         }
        break;

        case 46:
#line 609 "parse.y"
        {
         line_num = d_scanner.lineNr();
         ExpAst *rel = d_vsp__[-2].data<Tag__::EXP>();
         ExpAst *add = d_vsp__[0].data<Tag__::EXP>();
         int c = casting_binary(rel, add); 
         string bin_op = "LE_OP";
         switch(c){
         case 2: 
         bin_op = bin_op + "-FLOAT";
         break;
         case 1:
         bin_op = bin_op + "-INT";
         break;
         }
         ExpAst *a = new BIN_OP(bin_op, rel, add);
         a->type = result_type(rel->type, add->type, 2);
         a->ltype = false;
         a->only_int = rel->only_int && add->only_int;
         a->int_value = rel->int_value <= add->int_value; 
         d_val__.get<Tag__::EXP>() = a;
         }
        break;

        case 47:
#line 631 "parse.y"
        {
         line_num = d_scanner.lineNr();
         ExpAst *rel = d_vsp__[-2].data<Tag__::EXP>();
         ExpAst *add = d_vsp__[0].data<Tag__::EXP>();
         int c = casting_binary(rel, add); 
         string bin_op = "GE_OP";
         switch(c){
         case 2: 
         bin_op = bin_op + "-FLOAT";
         break;
         case 1:
         bin_op = bin_op + "-INT";
         break;
         }
         ExpAst *a = new BIN_OP(bin_op, rel, add);
         a->type = result_type(rel->type, add->type, 2);
         a->ltype = false;
         a->only_int = rel->only_int && add->only_int;
         a->int_value = rel->int_value >= add->int_value; 
         d_val__.get<Tag__::EXP>() = a;
         }
        break;

        case 48:
#line 656 "parse.y"
        {
         d_val__.get<Tag__::EXP>() = d_vsp__[0].data<Tag__::EXP>();
         }
        break;

        case 49:
#line 660 "parse.y"
        {
         line_num = d_scanner.lineNr();
         ExpAst *add = d_vsp__[-2].data<Tag__::EXP>();
         ExpAst *mult = d_vsp__[0].data<Tag__::EXP>();
         int c = casting_binary(add, mult); 
         string bin_op = "PLUS";
         switch(c){
         case 2: 
         bin_op = bin_op + "-FLOAT";
         break;
         case 1:
         bin_op = bin_op + "-INT";
         break;
         }
         ExpAst *a = new BIN_OP(bin_op, add, mult);
         a->type = result_type(add->type, mult->type, 3);
         a->ltype = false;
         a->only_int = mult->only_int && add->only_int;
         a->int_value = add->int_value + mult->int_value; 
         d_val__.get<Tag__::EXP>() = a;
         }
        break;

        case 50:
#line 682 "parse.y"
        {
         line_num = d_scanner.lineNr();
         ExpAst *add = d_vsp__[-2].data<Tag__::EXP>();
         ExpAst *mult = d_vsp__[0].data<Tag__::EXP>();
         int c = casting_binary(add, mult); 
         string bin_op = "MINUS";
         switch(c){
         case 2: 
         bin_op = bin_op + "-FLOAT";
         break;
         case 1:
         bin_op = bin_op + "-INT";
         break;
         }
         ExpAst *a = new BIN_OP(bin_op, add, mult);
         a->type = result_type(add->type, mult->type, 4);
         a->ltype = false;
         a->only_int = mult->only_int && add->only_int;
         a->int_value = add->int_value - mult->int_value; 
         d_val__.get<Tag__::EXP>() = a;
         }
        break;

        case 51:
#line 707 "parse.y"
        {
         d_val__.get<Tag__::EXP>() = d_vsp__[0].data<Tag__::EXP>();
         }
        break;

        case 52:
#line 711 "parse.y"
        {
         line_num = d_scanner.lineNr();
         ExpAst *mult = d_vsp__[-2].data<Tag__::EXP>();
         ExpAst *unary = d_vsp__[0].data<Tag__::EXP>();
         int c = casting_binary(mult, unary); 
         string bin_op = "MULT";
         switch(c){
         case 2: 
         bin_op = bin_op + "-FLOAT";
         break;
         case 1:
         bin_op = bin_op + "-INT";
         break;
         }
         ExpAst *a = new BIN_OP(bin_op, mult, unary);
         a->type = result_type(mult->type, unary->type, 5);
         a->ltype = false;
         a->only_int = mult->only_int && unary->only_int;
         a->int_value = mult->int_value * unary->int_value; 
         d_val__.get<Tag__::EXP>() = a;
         }
        break;

        case 53:
#line 733 "parse.y"
        {
         line_num = d_scanner.lineNr();
         ExpAst *mult = d_vsp__[-2].data<Tag__::EXP>();
         ExpAst *unary = d_vsp__[0].data<Tag__::EXP>();
         int c = casting_binary(mult, unary); 
         string bin_op = "DIV";
         switch(c){
         case 2: 
         bin_op = bin_op + "-FLOAT";
         break;
         case 1:
         bin_op = bin_op + "-INT";
         break;
         }
         ExpAst *a = new BIN_OP(bin_op, mult, unary);
         a->type = result_type(mult->type, unary->type, 5);
         a->ltype = false;
         a->only_int = mult->only_int && unary->only_int;
         if(unary->int_value == 0)
         print_error(-81, ""); 
         a->int_value = mult->int_value / unary->int_value;
         d_val__.get<Tag__::EXP>() = a;
         }
        break;

        case 54:
#line 760 "parse.y"
        {
         d_val__.get<Tag__::EXP>() = d_vsp__[0].data<Tag__::EXP>();
         }
        break;

        case 55:
#line 764 "parse.y"
        {
         line_num = d_scanner.lineNr();
         string unary = d_vsp__[-1].data<Tag__::TEXT>();
         ExpAst * post_exp = d_vsp__[0].data<Tag__::EXP>();
         ExpAst *a = new UN_OP(unary, post_exp);
         if(unary == "ref"){
         if(post_exp->ltype == false){ 
         print_error(-64, "");
         }
         a->type = ref(post_exp->type);
         a->ltype = false;
         a->only_int = false;
         a->int_value = -1;
         }
         else if(unary == "deref"){
         a->type = deref(post_exp->type);
         a->ltype = true; 
         a->only_int = false;
         a->int_value = -1;
         }
         else if(unary == "not"){
         a->type = unary_not(post_exp->type);
         a->ltype = false; 
         if(post_exp->only_int){
         a->only_int = true;
         a->int_value = (post_exp->int_value == 0); 
         }
         else{
         a->only_int = false;
         a->int_value = -1;
         }
         }
         else if(unary == "minus"){
         a->type = unary_minus(post_exp->type);
         a->ltype = false; 
         if(post_exp->only_int){
         a->only_int = true;
         a->int_value = -post_exp->int_value; 
         }
         else{
         a->only_int = false;
         a->int_value = -1;
         }
         }
         d_val__.get<Tag__::EXP>() = a;
         }
        break;

        case 56:
#line 814 "parse.y"
        {
         d_val__.get<Tag__::EXP>() = d_vsp__[0].data<Tag__::EXP>();
         }
        break;

        case 57:
#line 818 "parse.y"
        {
         line_num = d_scanner.lineNr();
         string id = d_vsp__[-2].data<Tag__::TEXT>();
         ExpAst *e = new EXP_EMPTY();
         EXP_GROUP *eg = new EXP_GROUP();
         eg->pushEx(e);
         std::vector<ExpAst *> v;
         int not_print = function_parameter_match(id, v); 
         ExpAst *a = new FUNC(id, eg);
         if(not_print == 1)
         a->type = ((globalSymTab->sym_rows.find(id))->second)->head;
         else
         a->type = new var_type("Void");
         a->ltype = false; 
         a->only_int = false;
         a->int_value = -1;
         init_stack(max_stack_size);
         d_val__.get<Tag__::EXP>() = a;
         }
        break;

        case 58:
#line 838 "parse.y"
        {
         line_num = d_scanner.lineNr();
         string id = d_vsp__[-3].data<Tag__::TEXT>();
         EXP_GROUP * expr_list = d_vsp__[-1].data<Tag__::EXPGP>();
         ExpAst *a = new FUNC(id, expr_list);
         vector<ExpAst *> Exp_List = expr_list->get_expression_list();
         int not_print = function_parameter_match(id, Exp_List); 
         if(not_print == 1)
         a->type = ((globalSymTab->sym_rows.find(d_vsp__[-3].data<Tag__::TEXT>()))->second)->head;
         else
         a->type = new var_type("Void");
         a->ltype = false; 
         a->only_int = false;
         a->int_value = -1;
         init_stack(max_stack_size);
         d_val__.get<Tag__::EXP>() = a;
         }
        break;

        case 59:
#line 856 "parse.y"
        {
         line_num = d_scanner.lineNr();
         ExpAst * post_exp = d_vsp__[-3].data<Tag__::EXP>();
         ExpAst * expr = d_vsp__[-1].data<Tag__::EXP>();
         ExpAst *a = new ARRAYREF(post_exp, expr);
         string exp_type = get_type(expr->type, "");
         a->type = deref(post_exp->type);
         if(exp_type != "int"){
         print_error(-5, ""); 
         } 
         a->ltype = true;
         a->only_int = false;
         a->int_value = -1;
         d_val__.get<Tag__::EXP>() = a;
         }
        break;

        case 60:
#line 872 "parse.y"
        {
         line_num = d_scanner.lineNr();
         ExpAst * post_exp = d_vsp__[-2].data<Tag__::EXP>();
         ExpAst *a = new MEMBER(post_exp, d_scanner.matched());
         a->type = data_member_access(post_exp->type, d_vsp__[0].data<Tag__::TEXT>(), 0);
         a->ltype = true;
         a->only_int = false;
         a->int_value = -1;
         d_val__.get<Tag__::EXP>() = a;
         }
        break;

        case 61:
#line 883 "parse.y"
        {
         line_num = d_scanner.lineNr();
         ExpAst * post_exp = d_vsp__[-2].data<Tag__::EXP>();
         ExpAst *a = new ARROW(post_exp, d_scanner.matched());
         a->type = data_member_access(post_exp->type, d_vsp__[0].data<Tag__::TEXT>(), 1);
         a->ltype = true;
         a->only_int = false;
         a->int_value = -1;
         d_val__.get<Tag__::EXP>() = a;
         }
        break;

        case 62:
#line 894 "parse.y"
        {
         line_num = d_scanner.lineNr();
         ExpAst * post_exp = d_vsp__[-1].data<Tag__::EXP>();
         ExpAst *a = new UN_OP("INC_OP", post_exp);
         
         if(post_exp->ltype == false){ 
         print_error(-65, "");
         }
         if(is_struct(post_exp->type)){
         print_error(-26,"");
         }
         else
         a->type = post_exp->type; 
         a->ltype = false;
         a->only_int = false;
         a->int_value = -1;
         d_val__.get<Tag__::EXP>() = a;
         }
        break;

        case 63:
#line 917 "parse.y"
        {
         line_num = d_scanner.lineNr();
         ExpAst *a = new IDENTIFIER_REF(d_vsp__[0].data<Tag__::TEXT>());
         a->type = identifier_type(d_vsp__[0].data<Tag__::TEXT>());
         a->ltype = true;
         a->only_int = false;
         a->int_value = -1;
         d_val__.get<Tag__::EXP>() = a;
         }
        break;

        case 64:
#line 927 "parse.y"
        {
         line_num = d_scanner.lineNr();
         string i = d_scanner.matched();
         int value = 0;
         if(i[0] == '0' && (i[1] == 'x' || i[1] == 'X')){
         value = strtol(i.substr(2, i.length()).c_str(), NULL, 16); 
         }
         else if(i[0] == '0' && (i[1] == 'b' || i[1] == 'B')){
         value = strtol(i.substr(2, i.length()).c_str(), NULL, 2); 
         }
         else if(i[0] == '0'){
         value = strtol(i.substr(1, i.length()).c_str(), NULL, 8); 
         }
         else{
         value = stoi(i);
         }
         ExpAst * a = new INT_EXP(d_scanner.matched());
         a->type = new var_type("int");
         a->ltype = false;
         a->only_int = true;
         a->int_value = value;
         d_val__.get<Tag__::EXP>() = a; 
         }
        break;

        case 65:
#line 952 "parse.y"
        {
         line_num = d_scanner.lineNr();
         ExpAst * a = new FLOAT_EXP(d_scanner.matched());
         a->type = new var_type("float");
         a->ltype = false;
         a->only_int = false;
         a->int_value = -1;
         d_val__.get<Tag__::EXP>() = a;
         }
        break;

        case 66:
#line 962 "parse.y"
        {
         line_num = d_scanner.lineNr();
         ExpAst * a = new STRING_EXP(d_scanner.matched());
         a->type = new var_type("char*"); 
         a->ltype = false;
         a->only_int = false;
         a->int_value = -1;
         d_val__.get<Tag__::EXP>() = a;
         }
        break;

        case 67:
#line 972 "parse.y"
        {
         d_val__.get<Tag__::EXP>() = d_vsp__[-1].data<Tag__::EXP>();
         }
        break;

        case 68:
#line 979 "parse.y"
        {
         EXP_GROUP *a = new EXP_GROUP();
         a->pushEx(d_vsp__[0].data<Tag__::EXP>());
         d_val__.get<Tag__::EXPGP>() = a;
         }
        break;

        case 69:
#line 985 "parse.y"
        {
         d_vsp__[-2].data<Tag__::EXPGP>()->pushEx(d_vsp__[0].data<Tag__::EXP>());
         d_val__.get<Tag__::EXPGP>() = d_vsp__[-2].data<Tag__::EXPGP>();
         }
        break;

        case 70:
#line 993 "parse.y"
        {
         string a = "minus";
         d_val__.get<Tag__::TEXT>() = a;
         }
        break;

        case 71:
#line 998 "parse.y"
        {
         string a = "not";
         d_val__.get<Tag__::TEXT>() = a;
         }
        break;

        case 72:
#line 1003 "parse.y"
        {
         string a = "ref";
         d_val__.get<Tag__::TEXT>() = a;
         }
        break;

        case 73:
#line 1008 "parse.y"
        {
         string a = "deref";
         d_val__.get<Tag__::TEXT>() = a;
         }
        break;

        case 74:
#line 1016 "parse.y"
        {
         StmtAst *a = new IF_STMT(d_vsp__[-4].data<Tag__::EXP>(), d_vsp__[-2].data<Tag__::STMT>(), d_vsp__[0].data<Tag__::STMT>());
         d_val__.get<Tag__::STMT>() = a;
         }
        break;

        case 75:
#line 1024 "parse.y"
        {
         StmtAst *a = new WHILE_STMT(d_vsp__[-2].data<Tag__::EXP>(), d_vsp__[0].data<Tag__::STMT>());
         d_val__.get<Tag__::STMT>() = a;
         }
        break;

        case 76:
#line 1029 "parse.y"
        {
         StmtAst *a = new FOR_STMT(d_vsp__[-6].data<Tag__::EXP>(), d_vsp__[-4].data<Tag__::EXP>(), d_vsp__[-2].data<Tag__::EXP>(), d_vsp__[0].data<Tag__::STMT>());
         d_val__.get<Tag__::STMT>() = a;
         }
        break;

        case 77:
#line 1037 "parse.y"
        {
         }
        break;

        case 78:
#line 1040 "parse.y"
        {
         }
        break;

        case 79:
#line 1046 "parse.y"
        {
         line_num = d_scanner.lineNr();
         std::pair<string,int> dec_type = d_vsp__[-2].data<Tag__::TYPEPAIR>();
         vector<SymRow *> dec = d_vsp__[-1].data<Tag__::VECSYMROW>();
         for(int i = 0; i < dec.size(); i++){
         SymRow * row = dec[i];
         
         if(row->head == NULL){
         var_type *tp = new var_type(dec_type.first);
         row->head = row->tail = tp;
         }
         else{
         if((row->tail)->t[0] == '*'){ 
         (row->tail)->t = dec_type.first + (row->tail)->t;
         }
         else{
         var_type *tp = new var_type(dec_type.first);
         (row->tail)->type = tp;
         row->tail = tp;
         }
         }
         int base_size = get_base_size(row->tail);
         row->size = base_size * row->size;
         if(get_type(row->tail, "") == "void"){
         print_error(-2, ""); 
         }
         else{
         row->offset = global_offset;
         row->param_local = 0;
         row->symTab = NULL;
         int err = localSymTab->insertRow(row->symName, row);
         if(err == -1){
         print_error(-1, row->symName);
         }
         else{ 
         global_offset = global_offset - row->size;
         }
         }
         }
         }
        break;

        case 80:
#line 1093 "parse.y"
        {
         vector<SymRow *> dec;
         dec.push_back(d_vsp__[0].data<Tag__::SYMROW>());
         d_val__.get<Tag__::VECSYMROW>() = dec;
         }
        break;

        case 81:
#line 1099 "parse.y"
        {
         vector<SymRow *> dec = d_vsp__[-2].data<Tag__::VECSYMROW>();
         dec.push_back(d_vsp__[0].data<Tag__::SYMROW>());
         d_val__.get<Tag__::VECSYMROW>() = dec;
         }
        break;

    }
}
catch (std::exception const &exc)
{
    exceptionHandler__(exc);
}

inline void ParserBase::reduce__(PI__ const &pi)
{
    d_token__ = pi.d_nonTerm;
    pop__(pi.d_size);

}

// If d_token__ is _UNDETERMINED_ then if d_nextToken__ is _UNDETERMINED_ another
// token is obtained from lex(). Then d_nextToken__ is assigned to d_token__.
void Parser::nextToken()
{
    if (d_token__ != _UNDETERMINED_)        // no need for a token: got one
        return;                             // already

    if (d_nextToken__ != _UNDETERMINED_)
    {
        popToken__();                       // consume pending token
    }
    else
    {
        ++d_acceptedTokens__;               // accept another token (see
                                            // errorRecover())
        d_token__ = lex();
        if (d_token__ <= 0)
            d_token__ = _EOF_;
    }
    print();
}

// if the final transition is negative, then we should reduce by the rule
// given by its positive value. Note that the `recovery' parameter is only
// used with the --debug option
int Parser::lookup(bool recovery)
{
    // $insert threading
    SR__ *sr = s_state[d_state__];        // get the appropriate state-table
    int lastIdx = sr->d_lastIdx;        // sentinel-index in the SR__ array

    SR__ *lastElementPtr = sr + lastIdx;
    SR__ *elementPtr = sr + 1;            // start the search at s_xx[1]

    lastElementPtr->d_token = d_token__;// set search-token

    while (elementPtr->d_token != d_token__)
        ++elementPtr;

    if (elementPtr == lastElementPtr)   // reached the last element
    {
        if (elementPtr->d_action < 0)   // default reduction
        {
            return elementPtr->d_action;                
        }

        // No default reduction, so token not found, so error.
        throw UNEXPECTED_TOKEN__;
    }

    // not at the last element: inspect the nature of the action
    // (< 0: reduce, 0: ACCEPT, > 0: shift)

    int action = elementPtr->d_action;


    return action;
}

    // When an error has occurred, pop elements off the stack until the top
    // state has an error-item. If none is found, the default recovery
    // mode (which is to abort) is activated. 
    //
    // If EOF is encountered without being appropriate for the current state,
    // then the error recovery will fall back to the default recovery mode.
    // (i.e., parsing terminates)
void Parser::errorRecovery()
try
{
    if (d_acceptedTokens__ >= d_requiredTokens__)// only generate an error-
    {                                           // message if enough tokens 
        ++d_nErrors__;                          // were accepted. Otherwise
        char err[1024];sprintf(err, "Syntax error near line %lu", d_scanner.lineNr());error(err);                  // simply skip input

    }


    // get the error state
    while (not (s_state[top__()][0].d_type & ERR_ITEM))
    {
        pop__();
    }

    // In the error state, lookup a token allowing us to proceed.
    // Continuation may be possible following multiple reductions,
    // but eventuall a shift will be used, requiring the retrieval of
    // a terminal token. If a retrieved token doesn't match, the catch below 
    // will ensure the next token is requested in the while(true) block
    // implemented below:

    int lastToken = d_token__;                  // give the unexpected token a
                                                // chance to be processed
                                                // again.

    pushToken__(_error_);                       // specify _error_ as next token
    push__(lookup(true));                       // push the error state

    d_token__ = lastToken;                      // reactivate the unexpected
                                                // token (we're now in an
                                                // ERROR state).

    bool gotToken = true;                       // the next token is a terminal

    while (true)
    {
        try
        {
            if (s_state[d_state__]->d_type & REQ_TOKEN)
            {
                gotToken = d_token__ == _UNDETERMINED_;
                nextToken();                    // obtain next token
            }
            
            int action = lookup(true);

            if (action > 0)                 // push a new state
            {
                push__(action);
                popToken__();

                if (gotToken)
                {

                    d_acceptedTokens__ = 0;
                    return;
                }
            }
            else if (action < 0)
            {
                // no actions executed on recovery but save an already 
                // available token:
                if (d_token__ != _UNDETERMINED_)
                    pushToken__(d_token__);
 
                                            // next token is the rule's LHS
                reduce__(s_productionInfo[-action]); 
            }
            else
                ABORT();                    // abort when accepting during
                                            // error recovery
        }
        catch (...)
        {
            if (d_token__ == _EOF_)
                ABORT();                    // saw inappropriate _EOF_
                      
            popToken__();                   // failing token now skipped
        }
    }
}
catch (ErrorRecovery__)       // This is: DEFAULT_RECOVERY_MODE
{
    ABORT();
}

    // The parsing algorithm:
    // Initially, state 0 is pushed on the stack, and d_token__ as well as
    // d_nextToken__ are initialized to _UNDETERMINED_. 
    //
    // Then, in an eternal loop:
    //
    //  1. If a state does not have REQ_TOKEN no token is assigned to
    //     d_token__. If the state has REQ_TOKEN, nextToken() is called to
    //      determine d_nextToken__ and d_token__ is set to
    //     d_nextToken__. nextToken() will not call lex() unless d_nextToken__ is 
    //     _UNDETERMINED_. 
    //
    //  2. lookup() is called: 
    //     d_token__ is stored in the final element's d_token field of the
    //     state's SR_ array. 
    //
    //  3. The current token is looked up in the state's SR_ array
    //
    //  4. Depending on the result of the lookup() function the next state is
    //     shifted on the parser's stack, a reduction by some rule is applied,
    //     or the parsing function returns ACCEPT(). When a reduction is
    //     called for, any action that may have been defined for that
    //     reduction is executed.
    //
    //  5. An error occurs if d_token__ is not found, and the state has no
    //     default reduction. Error handling was described at the top of this
    //     file.

int Parser::parse()
try 
{
    push__(0);                              // initial state
    clearin();                              // clear the tokens.

    while (true)
    {
        try
        {
            if (s_state[d_state__]->d_type & REQ_TOKEN)
                nextToken();                // obtain next token


            int action = lookup(false);     // lookup d_token__ in d_state__

            if (action > 0)                 // SHIFT: push a new state
            {
                push__(action);
                popToken__();               // token processed
            }
            else if (action < 0)            // REDUCE: execute and pop.
            {
                executeAction(-action);
                                            // next token is the rule's LHS
                reduce__(s_productionInfo[-action]); 
            }
            else 
                ACCEPT();
        }
        catch (ErrorRecovery__)
        {
            errorRecovery();
        }
    }
}
catch (Return__ retValue)
{
    return retValue;
}

// $insert polymorphicImpl
namespace Meta__
{
   Base::~Base()
   {}
}




