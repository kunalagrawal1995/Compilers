sh cond_remove_scannerh.sh
flexc++ lexical.l
sed -i '/include/a #include "Parserbase.h"' Scanner.ih;
g++ --std=c++0x lex.cc parse.cc main.cc;
./a.out<test.cc>junk;
egrep 'nextToken|reduce' junk
    nextToken(): using `VOID'
    reduce(): by rule 4 to N-terminal `type_specifier'
    nextToken(): using `IDENTIFIER'
    nextToken(): using `(' (40)
    nextToken(): using `)' (41)
    reduce(): by rule 8 to N-terminal `fun_declarator'
    nextToken(): using `{' (123)
    nextToken(): using `INT'
    reduce(): by rule 5 to N-terminal `type_specifier'
    nextToken(): using `IDENTIFIER'
    reduce(): by rule 12 to N-terminal `declarator'
    nextToken(): using `;' (59)
    reduce(): by rule 70 to N-terminal `declarator_list'
    reduce(): by rule 69 to N-terminal `declaration'
    reduce(): by rule 67 to N-terminal `declaration_list'
    nextToken(): using `IDENTIFIER'
    reduce(): by rule 58 to N-terminal `l_expression'
    nextToken(): using `=' (61)
    nextToken(): using `INT_CONSTANT'
    reduce(): by rule 54 to N-terminal `primary_expression'
    reduce(): by rule 48 to N-terminal `postfix_expression'
    reduce(): by rule 46 to N-terminal `unary_expression'
    reduce(): by rule 43 to N-terminal `multiplicative_expression'
    nextToken(): using `;' (59)
    reduce(): by rule 40 to N-terminal `additive_expression'
    reduce(): by rule 35 to N-terminal `relational_expression'
    reduce(): by rule 32 to N-terminal `equality_expression'
    reduce(): by rule 30 to N-terminal `logical_and_expression'
    reduce(): by rule 28 to N-terminal `expression'
    reduce(): by rule 27 to N-terminal `assignment_statement'
    reduce(): by rule 24 to N-terminal `statement'
    reduce(): by rule 19 to N-terminal `statement_list'
    nextToken(): using `}' (125)
    reduce(): by rule 18 to N-terminal `compound_statement'
    reduce(): by rule 3 to N-terminal `function_definition'
    reduce(): by rule 1 to N-terminal `translation_unit'
    nextToken(): using `_EOF_'
