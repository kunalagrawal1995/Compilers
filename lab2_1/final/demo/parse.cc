// Generated by Bisonc++ V4.05.00 on Thu, 03 Mar 2016 14:40:32 +0530

// $insert class.ih
#include "Parser.ih"
#include "ast.cpp"

// The FIRST element of SR arrays shown below uses `d_type', defining the
// state's type, and `d_lastIdx' containing the last element's index. If
// d_lastIdx contains the REQ_TOKEN bitflag (see below) then the state needs
// a token: if in this state d_token__ is _UNDETERMINED_, nextToken() will be
// called

// The LAST element of SR arrays uses `d_token' containing the last retrieved
// token to speed up the (linear) seach.  Except for the first element of SR
// arrays, the field `d_action' is used to determine what to do next. If
// positive, it represents the next state (used with SHIFT); if zero, it
// indicates `ACCEPT', if negative, -d_action represents the number of the
// rule to reduce to.

// `lookup()' tries to find d_token__ in the current SR array. If it fails, and
// there is no default reduction UNEXPECTED_TOKEN__ is thrown, which is then
// caught by the error-recovery function.

// The error-recovery function will pop elements off the stack until a state
// having bit flag ERR_ITEM is found. This state has a transition on _error_
// which is applied. In this _error_ state, while the current token is not a
// proper continuation, new tokens are obtained by nextToken(). If such a
// token is found, error recovery is successful and the token is
// handled according to the error state's SR table and parsing continues.
// During error recovery semantic actions are ignored.

// A state flagged with the DEF_RED flag will perform a default
// reduction if no other continuations are available for the current token.

// The ACCEPT STATE never shows a default reduction: when it is reached the
// parser returns ACCEPT(). During the grammar
// analysis phase a default reduction may have been defined, but it is
// removed during the state-definition phase.

// So:
//      s_x[] = 
//      {
//                  [_field_1_]         [_field_2_]
//
// First element:   {state-type,        idx of last element},
// Other elements:  {required token,    action to perform},
//                                      ( < 0: reduce, 
//                                          0: ACCEPT,
//                                        > 0: next state)
// Last element:    {set to d_token__,    action to perform}
//      }

// When the --thread-safe option is specified, all static data are defined as
// const. If --thread-safe is not provided, the state-tables are not defined
// as const, since the lookup() function below will modify them


namespace // anonymous
{
    char const author[] = "Frank B. Brokken (f.b.brokken@rug.nl)";

    enum 
    {
        STACK_EXPANSION = 5     // size to expand the state-stack with when
                                // full
    };

    enum ReservedTokens
    {
        PARSE_ACCEPT     = 0,   // `ACCEPT' TRANSITION
        _UNDETERMINED_   = -2,
        _EOF_            = -1,
        _error_          = 256
    };
    enum StateType       // modify statetype/data.cc when this enum changes
    {
        NORMAL,
        ERR_ITEM,
        REQ_TOKEN,
        ERR_REQ,    // ERR_ITEM | REQ_TOKEN
        DEF_RED,    // state having default reduction
        ERR_DEF,    // ERR_ITEM | DEF_RED
        REQ_DEF,    // REQ_TOKEN | DEF_RED
        ERR_REQ_DEF // ERR_ITEM | REQ_TOKEN | DEF_RED
    };    
    struct PI__     // Production Info
    {
        size_t d_nonTerm; // identification number of this production's
                            // non-terminal 
        size_t d_size;    // number of elements in this production 
    };

    struct SR__     // Shift Reduce info, see its description above
    {
        union
        {
            int _field_1_;      // initializer, allowing initializations 
                                // of the SR s_[] arrays
            int d_type;
            int d_token;
        };
        union
        {
            int _field_2_;

            int d_lastIdx;          // if negative, the state uses SHIFT
            int d_action;           // may be negative (reduce), 
                                    // postive (shift), or 0 (accept)
            size_t d_errorState;    // used with Error states
        };
    };

    // $insert staticdata
    
// Productions Info Records:
PI__ const s_productionInfo[] = 
{
     {0, 0}, // not used: reduction values are negative
     {300, 1}, // 1: translation_unit ->  struct_specifier
     {300, 1}, // 2: translation_unit ->  function_definition
     {300, 2}, // 3: translation_unit ->  translation_unit function_definition
     {300, 2}, // 4: translation_unit ->  translation_unit struct_specifier
     {301, 6}, // 5: struct_specifier (STRUCT) ->  STRUCT IDENTIFIER '{' declaration_list '}' ';'
     {303, 3}, // 6: function_definition ->  type_specifier fun_declarator compound_statement
     {304, 1}, // 7: type_specifier ->  base_type
     {304, 2}, // 8: type_specifier ('*') ->  type_specifier '*'
     {306, 1}, // 9: base_type (VOID) ->  VOID
     {306, 1}, // 10: base_type (INT) ->  INT
     {306, 1}, // 11: base_type (FLOAT) ->  FLOAT
     {306, 2}, // 12: base_type (STRUCT) ->  STRUCT IDENTIFIER
     {305, 4}, // 13: fun_declarator (IDENTIFIER) ->  IDENTIFIER '(' parameter_list ')'
     {305, 3}, // 14: fun_declarator (IDENTIFIER) ->  IDENTIFIER '(' ')'
     {307, 1}, // 15: parameter_list ->  parameter_declaration
     {307, 3}, // 16: parameter_list (',') ->  parameter_list ',' parameter_declaration
     {308, 2}, // 17: parameter_declaration ->  type_specifier declarator
     {309, 1}, // 18: declarator (IDENTIFIER) ->  IDENTIFIER
     {309, 4}, // 19: declarator ('[') ->  declarator '[' constant_expression ']'
     {310, 1}, // 20: constant_expression (INT_CONSTANT) ->  INT_CONSTANT
     {310, 1}, // 21: constant_expression (FLOAT_CONSTANT) ->  FLOAT_CONSTANT
     {311, 2}, // 22: compound_statement ('{') ->  '{' '}'
     {311, 3}, // 23: compound_statement ('{') ->  '{' statement_list '}'
     {311, 4}, // 24: compound_statement ('{') ->  '{' declaration_list statement_list '}'
     {312, 1}, // 25: statement_list ->  statement
     {312, 2}, // 26: statement_list ->  statement_list statement
     {313, 3}, // 27: statement ('{') ->  '{' statement_list '}'
     {313, 1}, // 28: statement ->  selection_statement
     {313, 1}, // 29: statement ->  iteration_statement
     {313, 1}, // 30: statement ->  assignment_statement
     {313, 3}, // 31: statement (RETURN) ->  RETURN expression ';'
     {314, 1}, // 32: assignment_statement (';') ->  ';'
     {314, 4}, // 33: assignment_statement ('=') ->  l_expression '=' expression ';'
     {315, 1}, // 34: expression ->  logical_and_expression
     {315, 3}, // 35: expression (OR_OP) ->  expression OR_OP logical_and_expression
     {316, 1}, // 36: logical_and_expression ->  equality_expression
     {316, 3}, // 37: logical_and_expression (AND_OP) ->  logical_and_expression AND_OP equality_expression
     {317, 1}, // 38: equality_expression ->  relational_expression
     {317, 3}, // 39: equality_expression (EQ_OP) ->  equality_expression EQ_OP relational_expression
     {317, 3}, // 40: equality_expression (NE_OP) ->  equality_expression NE_OP relational_expression
     {318, 1}, // 41: relational_expression ->  additive_expression
     {318, 3}, // 42: relational_expression ('<') ->  relational_expression '<' additive_expression
     {318, 3}, // 43: relational_expression ('>') ->  relational_expression '>' additive_expression
     {318, 3}, // 44: relational_expression (LE_OP) ->  relational_expression LE_OP additive_expression
     {318, 3}, // 45: relational_expression (GE_OP) ->  relational_expression GE_OP additive_expression
     {319, 1}, // 46: additive_expression ->  multiplicative_expression
     {319, 3}, // 47: additive_expression ('+') ->  additive_expression '+' multiplicative_expression
     {319, 3}, // 48: additive_expression ('-') ->  additive_expression '-' multiplicative_expression
     {320, 1}, // 49: multiplicative_expression ->  unary_expression
     {320, 3}, // 50: multiplicative_expression ('*') ->  multiplicative_expression '*' unary_expression
     {320, 3}, // 51: multiplicative_expression ('/') ->  multiplicative_expression '/' unary_expression
     {321, 1}, // 52: unary_expression ->  postfix_expression
     {321, 2}, // 53: unary_expression ->  unary_operator postfix_expression
     {322, 1}, // 54: postfix_expression ->  primary_expression
     {322, 3}, // 55: postfix_expression (IDENTIFIER) ->  IDENTIFIER '(' ')'
     {322, 4}, // 56: postfix_expression (IDENTIFIER) ->  IDENTIFIER '(' expression_list ')'
     {322, 2}, // 57: postfix_expression (INC_OP) ->  l_expression INC_OP
     {323, 1}, // 58: primary_expression ->  l_expression
     {323, 3}, // 59: primary_expression ('=') ->  l_expression '=' expression
     {323, 2}, // 60: primary_expression ('&') ->  '&' l_expression
     {323, 1}, // 61: primary_expression (INT_CONSTANT) ->  INT_CONSTANT
     {323, 1}, // 62: primary_expression (FLOAT_CONSTANT) ->  FLOAT_CONSTANT
     {323, 1}, // 63: primary_expression (STRING_LITERAL) ->  STRING_LITERAL
     {323, 3}, // 64: primary_expression ('(') ->  '(' expression ')'
     {324, 1}, // 65: l_expression (IDENTIFIER) ->  IDENTIFIER
     {324, 4}, // 66: l_expression ('[') ->  l_expression '[' expression ']'
     {324, 2}, // 67: l_expression ('*') ->  '*' l_expression
     {324, 3}, // 68: l_expression ('.') ->  l_expression '.' IDENTIFIER
     {324, 3}, // 69: l_expression (PTR_OP) ->  l_expression PTR_OP IDENTIFIER
     {325, 1}, // 70: expression_list ->  expression
     {325, 3}, // 71: expression_list (',') ->  expression_list ',' expression
     {326, 1}, // 72: unary_operator ('-') ->  '-'
     {326, 1}, // 73: unary_operator ('!') ->  '!'
     {327, 7}, // 74: selection_statement (IF) ->  IF '(' expression ')' statement ELSE statement
     {328, 5}, // 75: iteration_statement (WHILE) ->  WHILE '(' expression ')' statement
     {328, 9}, // 76: iteration_statement (FOR) ->  FOR '(' expression ';' expression ';' expression ')' statement
     {302, 1}, // 77: declaration_list ->  declaration
     {302, 2}, // 78: declaration_list ->  declaration_list declaration
     {329, 3}, // 79: declaration (';') ->  type_specifier declarator_list ';'
     {330, 1}, // 80: declarator_list ->  declarator
     {330, 3}, // 81: declarator_list (',') ->  declarator_list ',' declarator
     {331, 1}, // 82: translation_unit_$ ->  translation_unit
};

// State info and SR__ transitions for each state.


SR__ s_0[] =
{
    { { REQ_TOKEN}, { 10} },                       
    { {       300}, {  1} }, // translation_unit   
    { {       301}, {  2} }, // struct_specifier   
    { {       303}, {  3} }, // function_definition
    { {       298}, {  4} }, // STRUCT             
    { {       304}, {  5} }, // type_specifier     
    { {       306}, {  6} }, // base_type          
    { {       281}, {  7} }, // VOID               
    { {       280}, {  8} }, // INT                
    { {       279}, {  9} }, // FLOAT              
    { {         0}, {  0} },                       
};

SR__ s_1[] =
{
    { { REQ_TOKEN}, {           10} },                       
    { {       303}, {           10} }, // function_definition
    { {       301}, {           11} }, // struct_specifier   
    { {       304}, {            5} }, // type_specifier     
    { {       298}, {            4} }, // STRUCT             
    { {       306}, {            6} }, // base_type          
    { {       281}, {            7} }, // VOID               
    { {       280}, {            8} }, // INT                
    { {       279}, {            9} }, // FLOAT              
    { {     _EOF_}, { PARSE_ACCEPT} },                       
    { {         0}, {            0} },                       
};

SR__ s_2[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -1} }, 
};

SR__ s_3[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -2} }, 
};

SR__ s_4[] =
{
    { { REQ_TOKEN}, {  2} },              
    { {       278}, { 12} }, // IDENTIFIER
    { {         0}, {  0} },              
};

SR__ s_5[] =
{
    { { REQ_TOKEN}, {  4} },                  
    { {       305}, { 13} }, // fun_declarator
    { {        42}, { 14} }, // '*'           
    { {       278}, { 15} }, // IDENTIFIER    
    { {         0}, {  0} },                  
};

SR__ s_6[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -7} }, 
};

SR__ s_7[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -9} }, 
};

SR__ s_8[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -10} }, 
};

SR__ s_9[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -11} }, 
};

SR__ s_10[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -3} }, 
};

SR__ s_11[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -4} }, 
};

SR__ s_12[] =
{
    { { REQ_DEF}, {   2} },       
    { {     123}, {  16} }, // '{'
    { {       0}, { -12} },       
};

SR__ s_13[] =
{
    { { REQ_TOKEN}, {  3} },                      
    { {       311}, { 17} }, // compound_statement
    { {       123}, { 18} }, // '{'               
    { {         0}, {  0} },                      
};

SR__ s_14[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -8} }, 
};

SR__ s_15[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        40}, { 19} }, // '('
    { {         0}, {  0} },       
};

SR__ s_16[] =
{
    { { REQ_TOKEN}, {  9} },                    
    { {       302}, { 20} }, // declaration_list
    { {       329}, { 21} }, // declaration     
    { {       304}, { 22} }, // type_specifier  
    { {       306}, {  6} }, // base_type       
    { {       281}, {  7} }, // VOID            
    { {       280}, {  8} }, // INT             
    { {       279}, {  9} }, // FLOAT           
    { {       298}, { 23} }, // STRUCT          
    { {         0}, {  0} },                    
};

SR__ s_17[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -6} }, 
};

SR__ s_18[] =
{
    { { REQ_TOKEN}, { 24} },                        
    { {       125}, { 24} }, // '}'                 
    { {       312}, { 25} }, // statement_list      
    { {       302}, { 26} }, // declaration_list    
    { {       313}, { 27} }, // statement           
    { {       329}, { 21} }, // declaration         
    { {       123}, { 28} }, // '{'                 
    { {       327}, { 29} }, // selection_statement 
    { {       328}, { 30} }, // iteration_statement 
    { {       314}, { 31} }, // assignment_statement
    { {       288}, { 32} }, // RETURN              
    { {       304}, { 22} }, // type_specifier      
    { {       284}, { 33} }, // IF                  
    { {       286}, { 34} }, // WHILE               
    { {       287}, { 35} }, // FOR                 
    { {        59}, { 36} }, // ';'                 
    { {       324}, { 37} }, // l_expression        
    { {       306}, {  6} }, // base_type           
    { {       278}, { 38} }, // IDENTIFIER          
    { {        42}, { 39} }, // '*'                 
    { {       281}, {  7} }, // VOID                
    { {       280}, {  8} }, // INT                 
    { {       279}, {  9} }, // FLOAT               
    { {       298}, { 23} }, // STRUCT              
    { {         0}, {  0} },                        
};

SR__ s_19[] =
{
    { { REQ_TOKEN}, { 10} },                         
    { {       307}, { 40} }, // parameter_list       
    { {        41}, { 41} }, // ')'                  
    { {       308}, { 42} }, // parameter_declaration
    { {       304}, { 43} }, // type_specifier       
    { {       306}, {  6} }, // base_type            
    { {       281}, {  7} }, // VOID                 
    { {       280}, {  8} }, // INT                  
    { {       279}, {  9} }, // FLOAT                
    { {       298}, { 23} }, // STRUCT               
    { {         0}, {  0} },                         
};

SR__ s_20[] =
{
    { { REQ_TOKEN}, {  9} },                  
    { {       125}, { 44} }, // '}'           
    { {       329}, { 45} }, // declaration   
    { {       304}, { 22} }, // type_specifier
    { {       306}, {  6} }, // base_type     
    { {       281}, {  7} }, // VOID          
    { {       280}, {  8} }, // INT           
    { {       279}, {  9} }, // FLOAT         
    { {       298}, { 23} }, // STRUCT        
    { {         0}, {  0} },                  
};

SR__ s_21[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -77} }, 
};

SR__ s_22[] =
{
    { { REQ_TOKEN}, {  5} },                   
    { {       330}, { 46} }, // declarator_list
    { {        42}, { 14} }, // '*'            
    { {       309}, { 47} }, // declarator     
    { {       278}, { 48} }, // IDENTIFIER     
    { {         0}, {  0} },                   
};

SR__ s_23[] =
{
    { { REQ_TOKEN}, {  2} },              
    { {       278}, { 49} }, // IDENTIFIER
    { {         0}, {  0} },              
};

SR__ s_24[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -22} }, 
};

SR__ s_25[] =
{
    { { REQ_TOKEN}, { 15} },                        
    { {       125}, { 50} }, // '}'                 
    { {       313}, { 51} }, // statement           
    { {       123}, { 28} }, // '{'                 
    { {       327}, { 29} }, // selection_statement 
    { {       328}, { 30} }, // iteration_statement 
    { {       314}, { 31} }, // assignment_statement
    { {       288}, { 32} }, // RETURN              
    { {       284}, { 33} }, // IF                  
    { {       286}, { 34} }, // WHILE               
    { {       287}, { 35} }, // FOR                 
    { {        59}, { 36} }, // ';'                 
    { {       324}, { 37} }, // l_expression        
    { {       278}, { 38} }, // IDENTIFIER          
    { {        42}, { 39} }, // '*'                 
    { {         0}, {  0} },                        
};

SR__ s_26[] =
{
    { { REQ_TOKEN}, { 22} },                        
    { {       312}, { 52} }, // statement_list      
    { {       329}, { 45} }, // declaration         
    { {       313}, { 27} }, // statement           
    { {       304}, { 22} }, // type_specifier      
    { {       123}, { 28} }, // '{'                 
    { {       327}, { 29} }, // selection_statement 
    { {       328}, { 30} }, // iteration_statement 
    { {       314}, { 31} }, // assignment_statement
    { {       288}, { 32} }, // RETURN              
    { {       306}, {  6} }, // base_type           
    { {       284}, { 33} }, // IF                  
    { {       286}, { 34} }, // WHILE               
    { {       287}, { 35} }, // FOR                 
    { {        59}, { 36} }, // ';'                 
    { {       324}, { 37} }, // l_expression        
    { {       281}, {  7} }, // VOID                
    { {       280}, {  8} }, // INT                 
    { {       279}, {  9} }, // FLOAT               
    { {       298}, { 23} }, // STRUCT              
    { {       278}, { 38} }, // IDENTIFIER          
    { {        42}, { 39} }, // '*'                 
    { {         0}, {  0} },                        
};

SR__ s_27[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -25} }, 
};

SR__ s_28[] =
{
    { { REQ_TOKEN}, { 15} },                        
    { {       312}, { 53} }, // statement_list      
    { {       313}, { 27} }, // statement           
    { {       123}, { 28} }, // '{'                 
    { {       327}, { 29} }, // selection_statement 
    { {       328}, { 30} }, // iteration_statement 
    { {       314}, { 31} }, // assignment_statement
    { {       288}, { 32} }, // RETURN              
    { {       284}, { 33} }, // IF                  
    { {       286}, { 34} }, // WHILE               
    { {       287}, { 35} }, // FOR                 
    { {        59}, { 36} }, // ';'                 
    { {       324}, { 37} }, // l_expression        
    { {       278}, { 38} }, // IDENTIFIER          
    { {        42}, { 39} }, // '*'                 
    { {         0}, {  0} },                        
};

SR__ s_29[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -28} }, 
};

SR__ s_30[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -29} }, 
};

SR__ s_31[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -30} }, 
};

SR__ s_32[] =
{
    { { REQ_TOKEN}, { 21} },                             
    { {       315}, { 54} }, // expression               
    { {       316}, { 55} }, // logical_and_expression   
    { {       317}, { 56} }, // equality_expression      
    { {       318}, { 57} }, // relational_expression    
    { {       319}, { 58} }, // additive_expression      
    { {       320}, { 59} }, // multiplicative_expression
    { {       321}, { 60} }, // unary_expression         
    { {       322}, { 61} }, // postfix_expression       
    { {       326}, { 62} }, // unary_operator           
    { {       323}, { 63} }, // primary_expression       
    { {       278}, { 64} }, // IDENTIFIER               
    { {       324}, { 65} }, // l_expression             
    { {        45}, { 66} }, // '-'                      
    { {        33}, { 67} }, // '!'                      
    { {        38}, { 68} }, // '&'                      
    { {       282}, { 69} }, // INT_CONSTANT             
    { {       283}, { 70} }, // FLOAT_CONSTANT           
    { {       297}, { 71} }, // STRING_LITERAL           
    { {        40}, { 72} }, // '('                      
    { {        42}, { 39} }, // '*'                      
    { {         0}, {  0} },                             
};

SR__ s_33[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        40}, { 73} }, // '('
    { {         0}, {  0} },       
};

SR__ s_34[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        40}, { 74} }, // '('
    { {         0}, {  0} },       
};

SR__ s_35[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        40}, { 75} }, // '('
    { {         0}, {  0} },       
};

SR__ s_36[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -32} }, 
};

SR__ s_37[] =
{
    { { REQ_TOKEN}, {  5} },          
    { {        61}, { 76} }, // '='   
    { {        91}, { 77} }, // '['   
    { {        46}, { 78} }, // '.'   
    { {       299}, { 79} }, // PTR_OP
    { {         0}, {  0} },          
};

SR__ s_38[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -65} }, 
};

SR__ s_39[] =
{
    { { REQ_TOKEN}, {  4} },                
    { {       324}, { 80} }, // l_expression
    { {       278}, { 38} }, // IDENTIFIER  
    { {        42}, { 39} }, // '*'         
    { {         0}, {  0} },                
};

SR__ s_40[] =
{
    { { REQ_TOKEN}, {  3} },       
    { {        41}, { 81} }, // ')'
    { {        44}, { 82} }, // ','
    { {         0}, {  0} },       
};

SR__ s_41[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -14} }, 
};

SR__ s_42[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -15} }, 
};

SR__ s_43[] =
{
    { { REQ_TOKEN}, {  4} },              
    { {       309}, { 83} }, // declarator
    { {        42}, { 14} }, // '*'       
    { {       278}, { 48} }, // IDENTIFIER
    { {         0}, {  0} },              
};

SR__ s_44[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        59}, { 84} }, // ';'
    { {         0}, {  0} },       
};

SR__ s_45[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -78} }, 
};

SR__ s_46[] =
{
    { { REQ_TOKEN}, {  3} },       
    { {        59}, { 85} }, // ';'
    { {        44}, { 86} }, // ','
    { {         0}, {  0} },       
};

SR__ s_47[] =
{
    { { REQ_DEF}, {   2} },       
    { {      91}, {  87} }, // '['
    { {       0}, { -80} },       
};

SR__ s_48[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -18} }, 
};

SR__ s_49[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -12} }, 
};

SR__ s_50[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -23} }, 
};

SR__ s_51[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -26} }, 
};

SR__ s_52[] =
{
    { { REQ_TOKEN}, { 15} },                        
    { {       125}, { 88} }, // '}'                 
    { {       313}, { 51} }, // statement           
    { {       123}, { 28} }, // '{'                 
    { {       327}, { 29} }, // selection_statement 
    { {       328}, { 30} }, // iteration_statement 
    { {       314}, { 31} }, // assignment_statement
    { {       288}, { 32} }, // RETURN              
    { {       284}, { 33} }, // IF                  
    { {       286}, { 34} }, // WHILE               
    { {       287}, { 35} }, // FOR                 
    { {        59}, { 36} }, // ';'                 
    { {       324}, { 37} }, // l_expression        
    { {       278}, { 38} }, // IDENTIFIER          
    { {        42}, { 39} }, // '*'                 
    { {         0}, {  0} },                        
};

SR__ s_53[] =
{
    { { REQ_TOKEN}, { 15} },                        
    { {       125}, { 89} }, // '}'                 
    { {       313}, { 51} }, // statement           
    { {       123}, { 28} }, // '{'                 
    { {       327}, { 29} }, // selection_statement 
    { {       328}, { 30} }, // iteration_statement 
    { {       314}, { 31} }, // assignment_statement
    { {       288}, { 32} }, // RETURN              
    { {       284}, { 33} }, // IF                  
    { {       286}, { 34} }, // WHILE               
    { {       287}, { 35} }, // FOR                 
    { {        59}, { 36} }, // ';'                 
    { {       324}, { 37} }, // l_expression        
    { {       278}, { 38} }, // IDENTIFIER          
    { {        42}, { 39} }, // '*'                 
    { {         0}, {  0} },                        
};

SR__ s_54[] =
{
    { { REQ_TOKEN}, {  3} },         
    { {        59}, { 90} }, // ';'  
    { {       294}, { 91} }, // OR_OP
    { {         0}, {  0} },         
};

SR__ s_55[] =
{
    { { REQ_DEF}, {   2} },          
    { {     293}, {  92} }, // AND_OP
    { {       0}, { -34} },          
};

SR__ s_56[] =
{
    { { REQ_DEF}, {   3} },         
    { {     292}, {  93} }, // EQ_OP
    { {     291}, {  94} }, // NE_OP
    { {       0}, { -36} },         
};

SR__ s_57[] =
{
    { { REQ_DEF}, {   5} },         
    { {      60}, {  95} }, // '<'  
    { {      62}, {  96} }, // '>'  
    { {     289}, {  97} }, // LE_OP
    { {     290}, {  98} }, // GE_OP
    { {       0}, { -38} },         
};

SR__ s_58[] =
{
    { { REQ_DEF}, {   3} },       
    { {      43}, {  99} }, // '+'
    { {      45}, { 100} }, // '-'
    { {       0}, { -41} },       
};

SR__ s_59[] =
{
    { { REQ_DEF}, {   3} },       
    { {      42}, { 101} }, // '*'
    { {      47}, { 102} }, // '/'
    { {       0}, { -46} },       
};

SR__ s_60[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -49} }, 
};

SR__ s_61[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -52} }, 
};

SR__ s_62[] =
{
    { { REQ_TOKEN}, {  11} },                      
    { {       322}, { 103} }, // postfix_expression
    { {       323}, {  63} }, // primary_expression
    { {       278}, {  64} }, // IDENTIFIER        
    { {       324}, {  65} }, // l_expression      
    { {        38}, {  68} }, // '&'               
    { {       282}, {  69} }, // INT_CONSTANT      
    { {       283}, {  70} }, // FLOAT_CONSTANT    
    { {       297}, {  71} }, // STRING_LITERAL    
    { {        40}, {  72} }, // '('               
    { {        42}, {  39} }, // '*'               
    { {         0}, {   0} },                      
};

SR__ s_63[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -54} }, 
};

SR__ s_64[] =
{
    { { REQ_DEF}, {   2} },       
    { {      40}, { 104} }, // '('
    { {       0}, { -65} },       
};

SR__ s_65[] =
{
    { { REQ_DEF}, {   6} },          
    { {     295}, { 105} }, // INC_OP
    { {      61}, { 106} }, // '='   
    { {      91}, {  77} }, // '['   
    { {      46}, {  78} }, // '.'   
    { {     299}, {  79} }, // PTR_OP
    { {       0}, { -58} },          
};

SR__ s_66[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -72} }, 
};

SR__ s_67[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -73} }, 
};

SR__ s_68[] =
{
    { { REQ_TOKEN}, {   4} },                
    { {       324}, { 107} }, // l_expression
    { {       278}, {  38} }, // IDENTIFIER  
    { {        42}, {  39} }, // '*'         
    { {         0}, {   0} },                
};

SR__ s_69[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -61} }, 
};

SR__ s_70[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -62} }, 
};

SR__ s_71[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -63} }, 
};

SR__ s_72[] =
{
    { { REQ_TOKEN}, {  21} },                             
    { {       315}, { 108} }, // expression               
    { {       316}, {  55} }, // logical_and_expression   
    { {       317}, {  56} }, // equality_expression      
    { {       318}, {  57} }, // relational_expression    
    { {       319}, {  58} }, // additive_expression      
    { {       320}, {  59} }, // multiplicative_expression
    { {       321}, {  60} }, // unary_expression         
    { {       322}, {  61} }, // postfix_expression       
    { {       326}, {  62} }, // unary_operator           
    { {       323}, {  63} }, // primary_expression       
    { {       278}, {  64} }, // IDENTIFIER               
    { {       324}, {  65} }, // l_expression             
    { {        45}, {  66} }, // '-'                      
    { {        33}, {  67} }, // '!'                      
    { {        38}, {  68} }, // '&'                      
    { {       282}, {  69} }, // INT_CONSTANT             
    { {       283}, {  70} }, // FLOAT_CONSTANT           
    { {       297}, {  71} }, // STRING_LITERAL           
    { {        40}, {  72} }, // '('                      
    { {        42}, {  39} }, // '*'                      
    { {         0}, {   0} },                             
};

SR__ s_73[] =
{
    { { REQ_TOKEN}, {  21} },                             
    { {       315}, { 109} }, // expression               
    { {       316}, {  55} }, // logical_and_expression   
    { {       317}, {  56} }, // equality_expression      
    { {       318}, {  57} }, // relational_expression    
    { {       319}, {  58} }, // additive_expression      
    { {       320}, {  59} }, // multiplicative_expression
    { {       321}, {  60} }, // unary_expression         
    { {       322}, {  61} }, // postfix_expression       
    { {       326}, {  62} }, // unary_operator           
    { {       323}, {  63} }, // primary_expression       
    { {       278}, {  64} }, // IDENTIFIER               
    { {       324}, {  65} }, // l_expression             
    { {        45}, {  66} }, // '-'                      
    { {        33}, {  67} }, // '!'                      
    { {        38}, {  68} }, // '&'                      
    { {       282}, {  69} }, // INT_CONSTANT             
    { {       283}, {  70} }, // FLOAT_CONSTANT           
    { {       297}, {  71} }, // STRING_LITERAL           
    { {        40}, {  72} }, // '('                      
    { {        42}, {  39} }, // '*'                      
    { {         0}, {   0} },                             
};

SR__ s_74[] =
{
    { { REQ_TOKEN}, {  21} },                             
    { {       315}, { 110} }, // expression               
    { {       316}, {  55} }, // logical_and_expression   
    { {       317}, {  56} }, // equality_expression      
    { {       318}, {  57} }, // relational_expression    
    { {       319}, {  58} }, // additive_expression      
    { {       320}, {  59} }, // multiplicative_expression
    { {       321}, {  60} }, // unary_expression         
    { {       322}, {  61} }, // postfix_expression       
    { {       326}, {  62} }, // unary_operator           
    { {       323}, {  63} }, // primary_expression       
    { {       278}, {  64} }, // IDENTIFIER               
    { {       324}, {  65} }, // l_expression             
    { {        45}, {  66} }, // '-'                      
    { {        33}, {  67} }, // '!'                      
    { {        38}, {  68} }, // '&'                      
    { {       282}, {  69} }, // INT_CONSTANT             
    { {       283}, {  70} }, // FLOAT_CONSTANT           
    { {       297}, {  71} }, // STRING_LITERAL           
    { {        40}, {  72} }, // '('                      
    { {        42}, {  39} }, // '*'                      
    { {         0}, {   0} },                             
};

SR__ s_75[] =
{
    { { REQ_TOKEN}, {  21} },                             
    { {       315}, { 111} }, // expression               
    { {       316}, {  55} }, // logical_and_expression   
    { {       317}, {  56} }, // equality_expression      
    { {       318}, {  57} }, // relational_expression    
    { {       319}, {  58} }, // additive_expression      
    { {       320}, {  59} }, // multiplicative_expression
    { {       321}, {  60} }, // unary_expression         
    { {       322}, {  61} }, // postfix_expression       
    { {       326}, {  62} }, // unary_operator           
    { {       323}, {  63} }, // primary_expression       
    { {       278}, {  64} }, // IDENTIFIER               
    { {       324}, {  65} }, // l_expression             
    { {        45}, {  66} }, // '-'                      
    { {        33}, {  67} }, // '!'                      
    { {        38}, {  68} }, // '&'                      
    { {       282}, {  69} }, // INT_CONSTANT             
    { {       283}, {  70} }, // FLOAT_CONSTANT           
    { {       297}, {  71} }, // STRING_LITERAL           
    { {        40}, {  72} }, // '('                      
    { {        42}, {  39} }, // '*'                      
    { {         0}, {   0} },                             
};

SR__ s_76[] =
{
    { { REQ_TOKEN}, {  21} },                             
    { {       315}, { 112} }, // expression               
    { {       316}, {  55} }, // logical_and_expression   
    { {       317}, {  56} }, // equality_expression      
    { {       318}, {  57} }, // relational_expression    
    { {       319}, {  58} }, // additive_expression      
    { {       320}, {  59} }, // multiplicative_expression
    { {       321}, {  60} }, // unary_expression         
    { {       322}, {  61} }, // postfix_expression       
    { {       326}, {  62} }, // unary_operator           
    { {       323}, {  63} }, // primary_expression       
    { {       278}, {  64} }, // IDENTIFIER               
    { {       324}, {  65} }, // l_expression             
    { {        45}, {  66} }, // '-'                      
    { {        33}, {  67} }, // '!'                      
    { {        38}, {  68} }, // '&'                      
    { {       282}, {  69} }, // INT_CONSTANT             
    { {       283}, {  70} }, // FLOAT_CONSTANT           
    { {       297}, {  71} }, // STRING_LITERAL           
    { {        40}, {  72} }, // '('                      
    { {        42}, {  39} }, // '*'                      
    { {         0}, {   0} },                             
};

SR__ s_77[] =
{
    { { REQ_TOKEN}, {  21} },                             
    { {       315}, { 113} }, // expression               
    { {       316}, {  55} }, // logical_and_expression   
    { {       317}, {  56} }, // equality_expression      
    { {       318}, {  57} }, // relational_expression    
    { {       319}, {  58} }, // additive_expression      
    { {       320}, {  59} }, // multiplicative_expression
    { {       321}, {  60} }, // unary_expression         
    { {       322}, {  61} }, // postfix_expression       
    { {       326}, {  62} }, // unary_operator           
    { {       323}, {  63} }, // primary_expression       
    { {       278}, {  64} }, // IDENTIFIER               
    { {       324}, {  65} }, // l_expression             
    { {        45}, {  66} }, // '-'                      
    { {        33}, {  67} }, // '!'                      
    { {        38}, {  68} }, // '&'                      
    { {       282}, {  69} }, // INT_CONSTANT             
    { {       283}, {  70} }, // FLOAT_CONSTANT           
    { {       297}, {  71} }, // STRING_LITERAL           
    { {        40}, {  72} }, // '('                      
    { {        42}, {  39} }, // '*'                      
    { {         0}, {   0} },                             
};

SR__ s_78[] =
{
    { { REQ_TOKEN}, {   2} },              
    { {       278}, { 114} }, // IDENTIFIER
    { {         0}, {   0} },              
};

SR__ s_79[] =
{
    { { REQ_TOKEN}, {   2} },              
    { {       278}, { 115} }, // IDENTIFIER
    { {         0}, {   0} },              
};

SR__ s_80[] =
{
    { { REQ_DEF}, {   4} },          
    { {      91}, {  77} }, // '['   
    { {      46}, {  78} }, // '.'   
    { {     299}, {  79} }, // PTR_OP
    { {       0}, { -67} },          
};

SR__ s_81[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -13} }, 
};

SR__ s_82[] =
{
    { { REQ_TOKEN}, {   8} },                         
    { {       308}, { 116} }, // parameter_declaration
    { {       304}, {  43} }, // type_specifier       
    { {       306}, {   6} }, // base_type            
    { {       281}, {   7} }, // VOID                 
    { {       280}, {   8} }, // INT                  
    { {       279}, {   9} }, // FLOAT                
    { {       298}, {  23} }, // STRUCT               
    { {         0}, {   0} },                         
};

SR__ s_83[] =
{
    { { REQ_DEF}, {   2} },       
    { {      91}, {  87} }, // '['
    { {       0}, { -17} },       
};

SR__ s_84[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -5} }, 
};

SR__ s_85[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -79} }, 
};

SR__ s_86[] =
{
    { { REQ_TOKEN}, {   3} },              
    { {       309}, { 117} }, // declarator
    { {       278}, {  48} }, // IDENTIFIER
    { {         0}, {   0} },              
};

SR__ s_87[] =
{
    { { REQ_TOKEN}, {   4} },                       
    { {       310}, { 118} }, // constant_expression
    { {       282}, { 119} }, // INT_CONSTANT       
    { {       283}, { 120} }, // FLOAT_CONSTANT     
    { {         0}, {   0} },                       
};

SR__ s_88[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -24} }, 
};

SR__ s_89[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -27} }, 
};

SR__ s_90[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -31} }, 
};

SR__ s_91[] =
{
    { { REQ_TOKEN}, {  20} },                             
    { {       316}, { 121} }, // logical_and_expression   
    { {       317}, {  56} }, // equality_expression      
    { {       318}, {  57} }, // relational_expression    
    { {       319}, {  58} }, // additive_expression      
    { {       320}, {  59} }, // multiplicative_expression
    { {       321}, {  60} }, // unary_expression         
    { {       322}, {  61} }, // postfix_expression       
    { {       326}, {  62} }, // unary_operator           
    { {       323}, {  63} }, // primary_expression       
    { {       278}, {  64} }, // IDENTIFIER               
    { {       324}, {  65} }, // l_expression             
    { {        45}, {  66} }, // '-'                      
    { {        33}, {  67} }, // '!'                      
    { {        38}, {  68} }, // '&'                      
    { {       282}, {  69} }, // INT_CONSTANT             
    { {       283}, {  70} }, // FLOAT_CONSTANT           
    { {       297}, {  71} }, // STRING_LITERAL           
    { {        40}, {  72} }, // '('                      
    { {        42}, {  39} }, // '*'                      
    { {         0}, {   0} },                             
};

SR__ s_92[] =
{
    { { REQ_TOKEN}, {  19} },                             
    { {       317}, { 122} }, // equality_expression      
    { {       318}, {  57} }, // relational_expression    
    { {       319}, {  58} }, // additive_expression      
    { {       320}, {  59} }, // multiplicative_expression
    { {       321}, {  60} }, // unary_expression         
    { {       322}, {  61} }, // postfix_expression       
    { {       326}, {  62} }, // unary_operator           
    { {       323}, {  63} }, // primary_expression       
    { {       278}, {  64} }, // IDENTIFIER               
    { {       324}, {  65} }, // l_expression             
    { {        45}, {  66} }, // '-'                      
    { {        33}, {  67} }, // '!'                      
    { {        38}, {  68} }, // '&'                      
    { {       282}, {  69} }, // INT_CONSTANT             
    { {       283}, {  70} }, // FLOAT_CONSTANT           
    { {       297}, {  71} }, // STRING_LITERAL           
    { {        40}, {  72} }, // '('                      
    { {        42}, {  39} }, // '*'                      
    { {         0}, {   0} },                             
};

SR__ s_93[] =
{
    { { REQ_TOKEN}, {  18} },                             
    { {       318}, { 123} }, // relational_expression    
    { {       319}, {  58} }, // additive_expression      
    { {       320}, {  59} }, // multiplicative_expression
    { {       321}, {  60} }, // unary_expression         
    { {       322}, {  61} }, // postfix_expression       
    { {       326}, {  62} }, // unary_operator           
    { {       323}, {  63} }, // primary_expression       
    { {       278}, {  64} }, // IDENTIFIER               
    { {       324}, {  65} }, // l_expression             
    { {        45}, {  66} }, // '-'                      
    { {        33}, {  67} }, // '!'                      
    { {        38}, {  68} }, // '&'                      
    { {       282}, {  69} }, // INT_CONSTANT             
    { {       283}, {  70} }, // FLOAT_CONSTANT           
    { {       297}, {  71} }, // STRING_LITERAL           
    { {        40}, {  72} }, // '('                      
    { {        42}, {  39} }, // '*'                      
    { {         0}, {   0} },                             
};

SR__ s_94[] =
{
    { { REQ_TOKEN}, {  18} },                             
    { {       318}, { 124} }, // relational_expression    
    { {       319}, {  58} }, // additive_expression      
    { {       320}, {  59} }, // multiplicative_expression
    { {       321}, {  60} }, // unary_expression         
    { {       322}, {  61} }, // postfix_expression       
    { {       326}, {  62} }, // unary_operator           
    { {       323}, {  63} }, // primary_expression       
    { {       278}, {  64} }, // IDENTIFIER               
    { {       324}, {  65} }, // l_expression             
    { {        45}, {  66} }, // '-'                      
    { {        33}, {  67} }, // '!'                      
    { {        38}, {  68} }, // '&'                      
    { {       282}, {  69} }, // INT_CONSTANT             
    { {       283}, {  70} }, // FLOAT_CONSTANT           
    { {       297}, {  71} }, // STRING_LITERAL           
    { {        40}, {  72} }, // '('                      
    { {        42}, {  39} }, // '*'                      
    { {         0}, {   0} },                             
};

SR__ s_95[] =
{
    { { REQ_TOKEN}, {  17} },                             
    { {       319}, { 125} }, // additive_expression      
    { {       320}, {  59} }, // multiplicative_expression
    { {       321}, {  60} }, // unary_expression         
    { {       322}, {  61} }, // postfix_expression       
    { {       326}, {  62} }, // unary_operator           
    { {       323}, {  63} }, // primary_expression       
    { {       278}, {  64} }, // IDENTIFIER               
    { {       324}, {  65} }, // l_expression             
    { {        45}, {  66} }, // '-'                      
    { {        33}, {  67} }, // '!'                      
    { {        38}, {  68} }, // '&'                      
    { {       282}, {  69} }, // INT_CONSTANT             
    { {       283}, {  70} }, // FLOAT_CONSTANT           
    { {       297}, {  71} }, // STRING_LITERAL           
    { {        40}, {  72} }, // '('                      
    { {        42}, {  39} }, // '*'                      
    { {         0}, {   0} },                             
};

SR__ s_96[] =
{
    { { REQ_TOKEN}, {  17} },                             
    { {       319}, { 126} }, // additive_expression      
    { {       320}, {  59} }, // multiplicative_expression
    { {       321}, {  60} }, // unary_expression         
    { {       322}, {  61} }, // postfix_expression       
    { {       326}, {  62} }, // unary_operator           
    { {       323}, {  63} }, // primary_expression       
    { {       278}, {  64} }, // IDENTIFIER               
    { {       324}, {  65} }, // l_expression             
    { {        45}, {  66} }, // '-'                      
    { {        33}, {  67} }, // '!'                      
    { {        38}, {  68} }, // '&'                      
    { {       282}, {  69} }, // INT_CONSTANT             
    { {       283}, {  70} }, // FLOAT_CONSTANT           
    { {       297}, {  71} }, // STRING_LITERAL           
    { {        40}, {  72} }, // '('                      
    { {        42}, {  39} }, // '*'                      
    { {         0}, {   0} },                             
};

SR__ s_97[] =
{
    { { REQ_TOKEN}, {  17} },                             
    { {       319}, { 127} }, // additive_expression      
    { {       320}, {  59} }, // multiplicative_expression
    { {       321}, {  60} }, // unary_expression         
    { {       322}, {  61} }, // postfix_expression       
    { {       326}, {  62} }, // unary_operator           
    { {       323}, {  63} }, // primary_expression       
    { {       278}, {  64} }, // IDENTIFIER               
    { {       324}, {  65} }, // l_expression             
    { {        45}, {  66} }, // '-'                      
    { {        33}, {  67} }, // '!'                      
    { {        38}, {  68} }, // '&'                      
    { {       282}, {  69} }, // INT_CONSTANT             
    { {       283}, {  70} }, // FLOAT_CONSTANT           
    { {       297}, {  71} }, // STRING_LITERAL           
    { {        40}, {  72} }, // '('                      
    { {        42}, {  39} }, // '*'                      
    { {         0}, {   0} },                             
};

SR__ s_98[] =
{
    { { REQ_TOKEN}, {  17} },                             
    { {       319}, { 128} }, // additive_expression      
    { {       320}, {  59} }, // multiplicative_expression
    { {       321}, {  60} }, // unary_expression         
    { {       322}, {  61} }, // postfix_expression       
    { {       326}, {  62} }, // unary_operator           
    { {       323}, {  63} }, // primary_expression       
    { {       278}, {  64} }, // IDENTIFIER               
    { {       324}, {  65} }, // l_expression             
    { {        45}, {  66} }, // '-'                      
    { {        33}, {  67} }, // '!'                      
    { {        38}, {  68} }, // '&'                      
    { {       282}, {  69} }, // INT_CONSTANT             
    { {       283}, {  70} }, // FLOAT_CONSTANT           
    { {       297}, {  71} }, // STRING_LITERAL           
    { {        40}, {  72} }, // '('                      
    { {        42}, {  39} }, // '*'                      
    { {         0}, {   0} },                             
};

SR__ s_99[] =
{
    { { REQ_TOKEN}, {  16} },                             
    { {       320}, { 129} }, // multiplicative_expression
    { {       321}, {  60} }, // unary_expression         
    { {       322}, {  61} }, // postfix_expression       
    { {       326}, {  62} }, // unary_operator           
    { {       323}, {  63} }, // primary_expression       
    { {       278}, {  64} }, // IDENTIFIER               
    { {       324}, {  65} }, // l_expression             
    { {        45}, {  66} }, // '-'                      
    { {        33}, {  67} }, // '!'                      
    { {        38}, {  68} }, // '&'                      
    { {       282}, {  69} }, // INT_CONSTANT             
    { {       283}, {  70} }, // FLOAT_CONSTANT           
    { {       297}, {  71} }, // STRING_LITERAL           
    { {        40}, {  72} }, // '('                      
    { {        42}, {  39} }, // '*'                      
    { {         0}, {   0} },                             
};

SR__ s_100[] =
{
    { { REQ_TOKEN}, {  16} },                             
    { {       320}, { 130} }, // multiplicative_expression
    { {       321}, {  60} }, // unary_expression         
    { {       322}, {  61} }, // postfix_expression       
    { {       326}, {  62} }, // unary_operator           
    { {       323}, {  63} }, // primary_expression       
    { {       278}, {  64} }, // IDENTIFIER               
    { {       324}, {  65} }, // l_expression             
    { {        45}, {  66} }, // '-'                      
    { {        33}, {  67} }, // '!'                      
    { {        38}, {  68} }, // '&'                      
    { {       282}, {  69} }, // INT_CONSTANT             
    { {       283}, {  70} }, // FLOAT_CONSTANT           
    { {       297}, {  71} }, // STRING_LITERAL           
    { {        40}, {  72} }, // '('                      
    { {        42}, {  39} }, // '*'                      
    { {         0}, {   0} },                             
};

SR__ s_101[] =
{
    { { REQ_TOKEN}, {  15} },                      
    { {       321}, { 131} }, // unary_expression  
    { {       322}, {  61} }, // postfix_expression
    { {       326}, {  62} }, // unary_operator    
    { {       323}, {  63} }, // primary_expression
    { {       278}, {  64} }, // IDENTIFIER        
    { {       324}, {  65} }, // l_expression      
    { {        45}, {  66} }, // '-'               
    { {        33}, {  67} }, // '!'               
    { {        38}, {  68} }, // '&'               
    { {       282}, {  69} }, // INT_CONSTANT      
    { {       283}, {  70} }, // FLOAT_CONSTANT    
    { {       297}, {  71} }, // STRING_LITERAL    
    { {        40}, {  72} }, // '('               
    { {        42}, {  39} }, // '*'               
    { {         0}, {   0} },                      
};

SR__ s_102[] =
{
    { { REQ_TOKEN}, {  15} },                      
    { {       321}, { 132} }, // unary_expression  
    { {       322}, {  61} }, // postfix_expression
    { {       326}, {  62} }, // unary_operator    
    { {       323}, {  63} }, // primary_expression
    { {       278}, {  64} }, // IDENTIFIER        
    { {       324}, {  65} }, // l_expression      
    { {        45}, {  66} }, // '-'               
    { {        33}, {  67} }, // '!'               
    { {        38}, {  68} }, // '&'               
    { {       282}, {  69} }, // INT_CONSTANT      
    { {       283}, {  70} }, // FLOAT_CONSTANT    
    { {       297}, {  71} }, // STRING_LITERAL    
    { {        40}, {  72} }, // '('               
    { {        42}, {  39} }, // '*'               
    { {         0}, {   0} },                      
};

SR__ s_103[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -53} }, 
};

SR__ s_104[] =
{
    { { REQ_TOKEN}, {  23} },                             
    { {        41}, { 133} }, // ')'                      
    { {       325}, { 134} }, // expression_list          
    { {       315}, { 135} }, // expression               
    { {       316}, {  55} }, // logical_and_expression   
    { {       317}, {  56} }, // equality_expression      
    { {       318}, {  57} }, // relational_expression    
    { {       319}, {  58} }, // additive_expression      
    { {       320}, {  59} }, // multiplicative_expression
    { {       321}, {  60} }, // unary_expression         
    { {       322}, {  61} }, // postfix_expression       
    { {       326}, {  62} }, // unary_operator           
    { {       323}, {  63} }, // primary_expression       
    { {       278}, {  64} }, // IDENTIFIER               
    { {       324}, {  65} }, // l_expression             
    { {        45}, {  66} }, // '-'                      
    { {        33}, {  67} }, // '!'                      
    { {        38}, {  68} }, // '&'                      
    { {       282}, {  69} }, // INT_CONSTANT             
    { {       283}, {  70} }, // FLOAT_CONSTANT           
    { {       297}, {  71} }, // STRING_LITERAL           
    { {        40}, {  72} }, // '('                      
    { {        42}, {  39} }, // '*'                      
    { {         0}, {   0} },                             
};

SR__ s_105[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -57} }, 
};

SR__ s_106[] =
{
    { { REQ_TOKEN}, {  21} },                             
    { {       315}, { 136} }, // expression               
    { {       316}, {  55} }, // logical_and_expression   
    { {       317}, {  56} }, // equality_expression      
    { {       318}, {  57} }, // relational_expression    
    { {       319}, {  58} }, // additive_expression      
    { {       320}, {  59} }, // multiplicative_expression
    { {       321}, {  60} }, // unary_expression         
    { {       322}, {  61} }, // postfix_expression       
    { {       326}, {  62} }, // unary_operator           
    { {       323}, {  63} }, // primary_expression       
    { {       278}, {  64} }, // IDENTIFIER               
    { {       324}, {  65} }, // l_expression             
    { {        45}, {  66} }, // '-'                      
    { {        33}, {  67} }, // '!'                      
    { {        38}, {  68} }, // '&'                      
    { {       282}, {  69} }, // INT_CONSTANT             
    { {       283}, {  70} }, // FLOAT_CONSTANT           
    { {       297}, {  71} }, // STRING_LITERAL           
    { {        40}, {  72} }, // '('                      
    { {        42}, {  39} }, // '*'                      
    { {         0}, {   0} },                             
};

SR__ s_107[] =
{
    { { REQ_DEF}, {   4} },          
    { {      91}, {  77} }, // '['   
    { {      46}, {  78} }, // '.'   
    { {     299}, {  79} }, // PTR_OP
    { {       0}, { -60} },          
};

SR__ s_108[] =
{
    { { REQ_TOKEN}, {   3} },         
    { {        41}, { 137} }, // ')'  
    { {       294}, {  91} }, // OR_OP
    { {         0}, {   0} },         
};

SR__ s_109[] =
{
    { { REQ_TOKEN}, {   3} },         
    { {        41}, { 138} }, // ')'  
    { {       294}, {  91} }, // OR_OP
    { {         0}, {   0} },         
};

SR__ s_110[] =
{
    { { REQ_TOKEN}, {   3} },         
    { {        41}, { 139} }, // ')'  
    { {       294}, {  91} }, // OR_OP
    { {         0}, {   0} },         
};

SR__ s_111[] =
{
    { { REQ_TOKEN}, {   3} },         
    { {        59}, { 140} }, // ';'  
    { {       294}, {  91} }, // OR_OP
    { {         0}, {   0} },         
};

SR__ s_112[] =
{
    { { REQ_TOKEN}, {   3} },         
    { {        59}, { 141} }, // ';'  
    { {       294}, {  91} }, // OR_OP
    { {         0}, {   0} },         
};

SR__ s_113[] =
{
    { { REQ_TOKEN}, {   3} },         
    { {        93}, { 142} }, // ']'  
    { {       294}, {  91} }, // OR_OP
    { {         0}, {   0} },         
};

SR__ s_114[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -68} }, 
};

SR__ s_115[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -69} }, 
};

SR__ s_116[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -16} }, 
};

SR__ s_117[] =
{
    { { REQ_DEF}, {   2} },       
    { {      91}, {  87} }, // '['
    { {       0}, { -81} },       
};

SR__ s_118[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        93}, { 143} }, // ']'
    { {         0}, {   0} },       
};

SR__ s_119[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -20} }, 
};

SR__ s_120[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -21} }, 
};

SR__ s_121[] =
{
    { { REQ_DEF}, {   2} },          
    { {     293}, {  92} }, // AND_OP
    { {       0}, { -35} },          
};

SR__ s_122[] =
{
    { { REQ_DEF}, {   3} },         
    { {     292}, {  93} }, // EQ_OP
    { {     291}, {  94} }, // NE_OP
    { {       0}, { -37} },         
};

SR__ s_123[] =
{
    { { REQ_DEF}, {   5} },         
    { {      60}, {  95} }, // '<'  
    { {      62}, {  96} }, // '>'  
    { {     289}, {  97} }, // LE_OP
    { {     290}, {  98} }, // GE_OP
    { {       0}, { -39} },         
};

SR__ s_124[] =
{
    { { REQ_DEF}, {   5} },         
    { {      60}, {  95} }, // '<'  
    { {      62}, {  96} }, // '>'  
    { {     289}, {  97} }, // LE_OP
    { {     290}, {  98} }, // GE_OP
    { {       0}, { -40} },         
};

SR__ s_125[] =
{
    { { REQ_DEF}, {   3} },       
    { {      43}, {  99} }, // '+'
    { {      45}, { 100} }, // '-'
    { {       0}, { -42} },       
};

SR__ s_126[] =
{
    { { REQ_DEF}, {   3} },       
    { {      43}, {  99} }, // '+'
    { {      45}, { 100} }, // '-'
    { {       0}, { -43} },       
};

SR__ s_127[] =
{
    { { REQ_DEF}, {   3} },       
    { {      43}, {  99} }, // '+'
    { {      45}, { 100} }, // '-'
    { {       0}, { -44} },       
};

SR__ s_128[] =
{
    { { REQ_DEF}, {   3} },       
    { {      43}, {  99} }, // '+'
    { {      45}, { 100} }, // '-'
    { {       0}, { -45} },       
};

SR__ s_129[] =
{
    { { REQ_DEF}, {   3} },       
    { {      42}, { 101} }, // '*'
    { {      47}, { 102} }, // '/'
    { {       0}, { -47} },       
};

SR__ s_130[] =
{
    { { REQ_DEF}, {   3} },       
    { {      42}, { 101} }, // '*'
    { {      47}, { 102} }, // '/'
    { {       0}, { -48} },       
};

SR__ s_131[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -50} }, 
};

SR__ s_132[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -51} }, 
};

SR__ s_133[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -55} }, 
};

SR__ s_134[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {        41}, { 144} }, // ')'
    { {        44}, { 145} }, // ','
    { {         0}, {   0} },       
};

SR__ s_135[] =
{
    { { REQ_DEF}, {   2} },         
    { {     294}, {  91} }, // OR_OP
    { {       0}, { -70} },         
};

SR__ s_136[] =
{
    { { REQ_DEF}, {   2} },         
    { {     294}, {  91} }, // OR_OP
    { {       0}, { -59} },         
};

SR__ s_137[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -64} }, 
};

SR__ s_138[] =
{
    { { REQ_TOKEN}, {  14} },                        
    { {       313}, { 146} }, // statement           
    { {       123}, {  28} }, // '{'                 
    { {       327}, {  29} }, // selection_statement 
    { {       328}, {  30} }, // iteration_statement 
    { {       314}, {  31} }, // assignment_statement
    { {       288}, {  32} }, // RETURN              
    { {       284}, {  33} }, // IF                  
    { {       286}, {  34} }, // WHILE               
    { {       287}, {  35} }, // FOR                 
    { {        59}, {  36} }, // ';'                 
    { {       324}, {  37} }, // l_expression        
    { {       278}, {  38} }, // IDENTIFIER          
    { {        42}, {  39} }, // '*'                 
    { {         0}, {   0} },                        
};

SR__ s_139[] =
{
    { { REQ_TOKEN}, {  14} },                        
    { {       313}, { 147} }, // statement           
    { {       123}, {  28} }, // '{'                 
    { {       327}, {  29} }, // selection_statement 
    { {       328}, {  30} }, // iteration_statement 
    { {       314}, {  31} }, // assignment_statement
    { {       288}, {  32} }, // RETURN              
    { {       284}, {  33} }, // IF                  
    { {       286}, {  34} }, // WHILE               
    { {       287}, {  35} }, // FOR                 
    { {        59}, {  36} }, // ';'                 
    { {       324}, {  37} }, // l_expression        
    { {       278}, {  38} }, // IDENTIFIER          
    { {        42}, {  39} }, // '*'                 
    { {         0}, {   0} },                        
};

SR__ s_140[] =
{
    { { REQ_TOKEN}, {  21} },                             
    { {       315}, { 148} }, // expression               
    { {       316}, {  55} }, // logical_and_expression   
    { {       317}, {  56} }, // equality_expression      
    { {       318}, {  57} }, // relational_expression    
    { {       319}, {  58} }, // additive_expression      
    { {       320}, {  59} }, // multiplicative_expression
    { {       321}, {  60} }, // unary_expression         
    { {       322}, {  61} }, // postfix_expression       
    { {       326}, {  62} }, // unary_operator           
    { {       323}, {  63} }, // primary_expression       
    { {       278}, {  64} }, // IDENTIFIER               
    { {       324}, {  65} }, // l_expression             
    { {        45}, {  66} }, // '-'                      
    { {        33}, {  67} }, // '!'                      
    { {        38}, {  68} }, // '&'                      
    { {       282}, {  69} }, // INT_CONSTANT             
    { {       283}, {  70} }, // FLOAT_CONSTANT           
    { {       297}, {  71} }, // STRING_LITERAL           
    { {        40}, {  72} }, // '('                      
    { {        42}, {  39} }, // '*'                      
    { {         0}, {   0} },                             
};

SR__ s_141[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -33} }, 
};

SR__ s_142[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -66} }, 
};

SR__ s_143[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -19} }, 
};

SR__ s_144[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -56} }, 
};

SR__ s_145[] =
{
    { { REQ_TOKEN}, {  21} },                             
    { {       315}, { 149} }, // expression               
    { {       316}, {  55} }, // logical_and_expression   
    { {       317}, {  56} }, // equality_expression      
    { {       318}, {  57} }, // relational_expression    
    { {       319}, {  58} }, // additive_expression      
    { {       320}, {  59} }, // multiplicative_expression
    { {       321}, {  60} }, // unary_expression         
    { {       322}, {  61} }, // postfix_expression       
    { {       326}, {  62} }, // unary_operator           
    { {       323}, {  63} }, // primary_expression       
    { {       278}, {  64} }, // IDENTIFIER               
    { {       324}, {  65} }, // l_expression             
    { {        45}, {  66} }, // '-'                      
    { {        33}, {  67} }, // '!'                      
    { {        38}, {  68} }, // '&'                      
    { {       282}, {  69} }, // INT_CONSTANT             
    { {       283}, {  70} }, // FLOAT_CONSTANT           
    { {       297}, {  71} }, // STRING_LITERAL           
    { {        40}, {  72} }, // '('                      
    { {        42}, {  39} }, // '*'                      
    { {         0}, {   0} },                             
};

SR__ s_146[] =
{
    { { REQ_TOKEN}, {   2} },        
    { {       285}, { 150} }, // ELSE
    { {         0}, {   0} },        
};

SR__ s_147[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -75} }, 
};

SR__ s_148[] =
{
    { { REQ_TOKEN}, {   3} },         
    { {        59}, { 151} }, // ';'  
    { {       294}, {  91} }, // OR_OP
    { {         0}, {   0} },         
};

SR__ s_149[] =
{
    { { REQ_DEF}, {   2} },         
    { {     294}, {  91} }, // OR_OP
    { {       0}, { -71} },         
};

SR__ s_150[] =
{
    { { REQ_TOKEN}, {  14} },                        
    { {       313}, { 152} }, // statement           
    { {       123}, {  28} }, // '{'                 
    { {       327}, {  29} }, // selection_statement 
    { {       328}, {  30} }, // iteration_statement 
    { {       314}, {  31} }, // assignment_statement
    { {       288}, {  32} }, // RETURN              
    { {       284}, {  33} }, // IF                  
    { {       286}, {  34} }, // WHILE               
    { {       287}, {  35} }, // FOR                 
    { {        59}, {  36} }, // ';'                 
    { {       324}, {  37} }, // l_expression        
    { {       278}, {  38} }, // IDENTIFIER          
    { {        42}, {  39} }, // '*'                 
    { {         0}, {   0} },                        
};

SR__ s_151[] =
{
    { { REQ_TOKEN}, {  21} },                             
    { {       315}, { 153} }, // expression               
    { {       316}, {  55} }, // logical_and_expression   
    { {       317}, {  56} }, // equality_expression      
    { {       318}, {  57} }, // relational_expression    
    { {       319}, {  58} }, // additive_expression      
    { {       320}, {  59} }, // multiplicative_expression
    { {       321}, {  60} }, // unary_expression         
    { {       322}, {  61} }, // postfix_expression       
    { {       326}, {  62} }, // unary_operator           
    { {       323}, {  63} }, // primary_expression       
    { {       278}, {  64} }, // IDENTIFIER               
    { {       324}, {  65} }, // l_expression             
    { {        45}, {  66} }, // '-'                      
    { {        33}, {  67} }, // '!'                      
    { {        38}, {  68} }, // '&'                      
    { {       282}, {  69} }, // INT_CONSTANT             
    { {       283}, {  70} }, // FLOAT_CONSTANT           
    { {       297}, {  71} }, // STRING_LITERAL           
    { {        40}, {  72} }, // '('                      
    { {        42}, {  39} }, // '*'                      
    { {         0}, {   0} },                             
};

SR__ s_152[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -74} }, 
};

SR__ s_153[] =
{
    { { REQ_TOKEN}, {   3} },         
    { {        41}, { 154} }, // ')'  
    { {       294}, {  91} }, // OR_OP
    { {         0}, {   0} },         
};

SR__ s_154[] =
{
    { { REQ_TOKEN}, {  14} },                        
    { {       313}, { 155} }, // statement           
    { {       123}, {  28} }, // '{'                 
    { {       327}, {  29} }, // selection_statement 
    { {       328}, {  30} }, // iteration_statement 
    { {       314}, {  31} }, // assignment_statement
    { {       288}, {  32} }, // RETURN              
    { {       284}, {  33} }, // IF                  
    { {       286}, {  34} }, // WHILE               
    { {       287}, {  35} }, // FOR                 
    { {        59}, {  36} }, // ';'                 
    { {       324}, {  37} }, // l_expression        
    { {       278}, {  38} }, // IDENTIFIER          
    { {        42}, {  39} }, // '*'                 
    { {         0}, {   0} },                        
};

SR__ s_155[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -76} }, 
};


// State array:
SR__ *s_state[] =
{
  s_0,  s_1,  s_2,  s_3,  s_4,  s_5,  s_6,  s_7,  s_8,  s_9,
  s_10,  s_11,  s_12,  s_13,  s_14,  s_15,  s_16,  s_17,  s_18,  s_19,
  s_20,  s_21,  s_22,  s_23,  s_24,  s_25,  s_26,  s_27,  s_28,  s_29,
  s_30,  s_31,  s_32,  s_33,  s_34,  s_35,  s_36,  s_37,  s_38,  s_39,
  s_40,  s_41,  s_42,  s_43,  s_44,  s_45,  s_46,  s_47,  s_48,  s_49,
  s_50,  s_51,  s_52,  s_53,  s_54,  s_55,  s_56,  s_57,  s_58,  s_59,
  s_60,  s_61,  s_62,  s_63,  s_64,  s_65,  s_66,  s_67,  s_68,  s_69,
  s_70,  s_71,  s_72,  s_73,  s_74,  s_75,  s_76,  s_77,  s_78,  s_79,
  s_80,  s_81,  s_82,  s_83,  s_84,  s_85,  s_86,  s_87,  s_88,  s_89,
  s_90,  s_91,  s_92,  s_93,  s_94,  s_95,  s_96,  s_97,  s_98,  s_99,
  s_100,  s_101,  s_102,  s_103,  s_104,  s_105,  s_106,  s_107,  s_108,  s_109,
  s_110,  s_111,  s_112,  s_113,  s_114,  s_115,  s_116,  s_117,  s_118,  s_119,
  s_120,  s_121,  s_122,  s_123,  s_124,  s_125,  s_126,  s_127,  s_128,  s_129,
  s_130,  s_131,  s_132,  s_133,  s_134,  s_135,  s_136,  s_137,  s_138,  s_139,
  s_140,  s_141,  s_142,  s_143,  s_144,  s_145,  s_146,  s_147,  s_148,  s_149,
  s_150,  s_151,  s_152,  s_153,  s_154,  s_155,
};

} // anonymous namespace ends



// If the parsing function call uses arguments, then provide an overloaded
// function.  The code below doesn't rely on parameters, so no arguments are
// required.  Furthermore, parse uses a function try block to allow us to do
// ACCEPT and ABORT from anywhere, even from within members called by actions,
// simply throwing the appropriate exceptions.

ParserBase::ParserBase()
:
    d_stackIdx__(-1),
    // $insert debuginit
    d_debug__(false),
    d_nErrors__(0),
    // $insert requiredtokens
    d_requiredTokens__(0),
    d_acceptedTokens__(d_requiredTokens__),
    d_token__(_UNDETERMINED_),
    d_nextToken__(_UNDETERMINED_)
{}


Meta__::SType ParserBase::d_val__; 
void Parser::print__()
{
// $insert print
}

void ParserBase::clearin()
{
    d_token__ = d_nextToken__ = _UNDETERMINED_;
}

void ParserBase::push__(size_t state)
{
    if (static_cast<size_t>(d_stackIdx__ + 1) == d_stateStack__.size())
    {
        size_t newSize = d_stackIdx__ + STACK_EXPANSION;
        d_stateStack__.resize(newSize);
        d_valueStack__.resize(newSize);
    }
    ++d_stackIdx__;
    d_stateStack__[d_stackIdx__] = d_state__ = state;
    *(d_vsp__ = &d_valueStack__[d_stackIdx__]) = d_val__;
}

void ParserBase::popToken__()
{
    d_token__ = d_nextToken__;

    d_val__ = d_nextVal__;
    d_nextVal__ = STYPE__();

    d_nextToken__ = _UNDETERMINED_;
}
     
void ParserBase::pushToken__(int token)
{
    d_nextToken__ = d_token__;
    d_nextVal__ = d_val__;
    d_token__ = token;
}
     
void ParserBase::pop__(size_t count)
{
    if (d_stackIdx__ < static_cast<int>(count))
    {
        ABORT();
    }

    d_stackIdx__ -= count;
    d_state__ = d_stateStack__[d_stackIdx__];
    d_vsp__ = &d_valueStack__[d_stackIdx__];
}

inline size_t ParserBase::top__() const
{
    return d_stateStack__[d_stackIdx__];
}

void Parser::executeAction(int production)
try
{
    if (d_token__ != _UNDETERMINED_)
        pushToken__(d_token__);     // save an already available token

                                    // save default non-nested block $$
    if (int size = s_productionInfo[production].d_size)
        d_val__ = d_vsp__[1 - size];

    switch (production)
    {
        // $insert actioncases
        
        case 1:
#line 18 "parse.y"
        { 
         abstract_astnode *a = new AST_EMPTY();
         abstract_astnode *b = new AST_GROUP();
         b->pushAST(a);
         d_val__.get<Tag__::ABS>() = b;
         
         }
        break;

        case 2:
#line 26 "parse.y"
        {
         abstract_astnode *b = new AST_GROUP();
         b->pushAST(d_vsp__[0].data<Tag__::ABS>());
         d_val__.get<Tag__::ABS>() = b;
         }
        break;

        case 3:
#line 33 "parse.y"
        {
         d_vsp__[-1].data<Tag__::ABS>()->pushAST(d_vsp__[0].data<Tag__::ABS>());
         d_val__.get<Tag__::ABS>() = d_vsp__[-1].data<Tag__::ABS>();
         }
        break;

        case 4:
#line 38 "parse.y"
        { 
         abstract_astnode *a = new AST_EMPTY();
         d_vsp__[-1].data<Tag__::ABS>()->pushAST(a);
         d_val__.get<Tag__::ABS>() = d_vsp__[-1].data<Tag__::ABS>();
         }
        break;

        case 6:
#line 51 "parse.y"
        {
         d_val__.get<Tag__::ABS>() = d_vsp__[0].data<Tag__::ABS>();
         }
        break;

        case 9:
#line 63 "parse.y"
        { 
         }
        break;

        case 10:
#line 66 "parse.y"
        { 
         }
        break;

        case 11:
#line 69 "parse.y"
        { 
         }
        break;

        case 12:
#line 72 "parse.y"
        { 
         }
        break;

        case 18:
#line 92 "parse.y"
        { 
         }
        break;

        case 19:
#line 95 "parse.y"
        {
         }
        break;

        case 22:
#line 106 "parse.y"
        {
         StmtAst *s = new EMPTY();
         abstract_astnode *a = new BLOCK_STMT(s);
         d_val__.get<Tag__::ABS>() = a;
         d_val__.get<Tag__::ABS>()->print();
         }
        break;

        case 23:
#line 113 "parse.y"
        {
         abstract_astnode *a = new BLOCK_STMT(d_vsp__[-1].data<Tag__::STMT>());
         d_val__.get<Tag__::ABS>() = a;
         d_val__.get<Tag__::ABS>()->print();
         }
        break;

        case 24:
#line 119 "parse.y"
        {
         abstract_astnode *a = new BLOCK_STMT(d_vsp__[-1].data<Tag__::STMT>());
         d_val__.get<Tag__::ABS>() = a;
         d_val__.get<Tag__::ABS>()->print();
         }
        break;

        case 25:
#line 128 "parse.y"
        {
         StmtAst *a = new STMT_GROUP();
         a->pushSt(d_vsp__[0].data<Tag__::STMT>());
         d_val__.get<Tag__::STMT>() = a;
         }
        break;

        case 26:
#line 134 "parse.y"
        {
         d_vsp__[-1].data<Tag__::STMT>()->pushSt(d_vsp__[0].data<Tag__::STMT>());
         d_val__.get<Tag__::STMT>() = d_vsp__[-1].data<Tag__::STMT>();
         }
        break;

        case 27:
#line 142 "parse.y"
        {
         StmtAst *a = new BLOCK_STMT(d_vsp__[-1].data<Tag__::STMT>());
         d_val__.get<Tag__::STMT>() = a;
         }
        break;

        case 28:
#line 147 "parse.y"
        {
         d_val__.get<Tag__::STMT>() = d_vsp__[0].data<Tag__::STMT>();
         }
        break;

        case 29:
#line 151 "parse.y"
        {
         d_val__.get<Tag__::STMT>() = d_vsp__[0].data<Tag__::STMT>();
         }
        break;

        case 30:
#line 155 "parse.y"
        {
         d_val__.get<Tag__::STMT>() = d_vsp__[0].data<Tag__::STMT>();
         }
        break;

        case 31:
#line 159 "parse.y"
        {
         StmtAst *a = new RETN(d_vsp__[-1].data<Tag__::EXP>());
         d_val__.get<Tag__::STMT>() = a;
         }
        break;

        case 32:
#line 167 "parse.y"
        {
         StmtAst *a = new EMPTY();
         d_val__.get<Tag__::STMT>() = a;
         }
        break;

        case 33:
#line 172 "parse.y"
        {
         StmtAst *a = new ASSIGN(d_vsp__[-3].data<Tag__::REF>(), d_vsp__[-1].data<Tag__::EXP>());
         d_val__.get<Tag__::STMT>() = a;
         }
        break;

        case 34:
#line 180 "parse.y"
        {
         d_val__.get<Tag__::EXP>() = d_vsp__[0].data<Tag__::EXP>();
         }
        break;

        case 35:
#line 184 "parse.y"
        {
         ExpAst *a = new BIN_OP("OR_OP", d_vsp__[-2].data<Tag__::EXP>(), d_vsp__[0].data<Tag__::EXP>());
         d_val__.get<Tag__::EXP>() = a;
         }
        break;

        case 36:
#line 192 "parse.y"
        {
         d_val__.get<Tag__::EXP>() = d_vsp__[0].data<Tag__::EXP>();
         }
        break;

        case 37:
#line 196 "parse.y"
        {
         ExpAst *a = new BIN_OP("AND_OP", d_vsp__[-2].data<Tag__::EXP>(), d_vsp__[0].data<Tag__::EXP>());
         d_val__.get<Tag__::EXP>() = a;
         }
        break;

        case 38:
#line 203 "parse.y"
        {
         d_val__.get<Tag__::EXP>() = d_vsp__[0].data<Tag__::EXP>();
         }
        break;

        case 39:
#line 207 "parse.y"
        {
         ExpAst *a = new BIN_OP("EQ_OP", d_vsp__[-2].data<Tag__::EXP>(), d_vsp__[0].data<Tag__::EXP>());
         d_val__.get<Tag__::EXP>() = a;
         }
        break;

        case 40:
#line 212 "parse.y"
        {
         ExpAst *a = new BIN_OP("NE_OP", d_vsp__[-2].data<Tag__::EXP>(), d_vsp__[0].data<Tag__::EXP>());
         d_val__.get<Tag__::EXP>() = a;
         }
        break;

        case 41:
#line 220 "parse.y"
        {
         d_val__.get<Tag__::EXP>() = d_vsp__[0].data<Tag__::EXP>();
         }
        break;

        case 42:
#line 224 "parse.y"
        {
         ExpAst *a = new BIN_OP("LT", d_vsp__[-2].data<Tag__::EXP>(), d_vsp__[0].data<Tag__::EXP>());
         d_val__.get<Tag__::EXP>() = a;
         }
        break;

        case 43:
#line 229 "parse.y"
        {
         ExpAst *a = new BIN_OP("GT", d_vsp__[-2].data<Tag__::EXP>(), d_vsp__[0].data<Tag__::EXP>());
         d_val__.get<Tag__::EXP>() = a;
         }
        break;

        case 44:
#line 234 "parse.y"
        {
         ExpAst *a = new BIN_OP("LE_OP", d_vsp__[-2].data<Tag__::EXP>(), d_vsp__[0].data<Tag__::EXP>());
         d_val__.get<Tag__::EXP>() = a;
         }
        break;

        case 45:
#line 239 "parse.y"
        {
         ExpAst *a = new BIN_OP("GE_OP", d_vsp__[-2].data<Tag__::EXP>(), d_vsp__[0].data<Tag__::EXP>());
         d_val__.get<Tag__::EXP>() = a;
         }
        break;

        case 46:
#line 247 "parse.y"
        {
         d_val__.get<Tag__::EXP>() = d_vsp__[0].data<Tag__::EXP>();
         }
        break;

        case 47:
#line 251 "parse.y"
        {
         ExpAst *a = new BIN_OP("PLUS", d_vsp__[-2].data<Tag__::EXP>(), d_vsp__[0].data<Tag__::EXP>());
         d_val__.get<Tag__::EXP>() = a;
         }
        break;

        case 48:
#line 256 "parse.y"
        {
         ExpAst *a = new BIN_OP("MINUS", d_vsp__[-2].data<Tag__::EXP>(), d_vsp__[0].data<Tag__::EXP>());
         d_val__.get<Tag__::EXP>() = a;
         }
        break;

        case 49:
#line 264 "parse.y"
        {
         d_val__.get<Tag__::EXP>() = d_vsp__[0].data<Tag__::EXP>();
         }
        break;

        case 50:
#line 268 "parse.y"
        {
         ExpAst *a = new BIN_OP("MULT", d_vsp__[-2].data<Tag__::EXP>(), d_vsp__[0].data<Tag__::EXP>());
         d_val__.get<Tag__::EXP>() = a;
         }
        break;

        case 51:
#line 273 "parse.y"
        {
         ExpAst *a = new BIN_OP("DIV", d_vsp__[-2].data<Tag__::EXP>(), d_vsp__[0].data<Tag__::EXP>());
         d_val__.get<Tag__::EXP>() = a;
         }
        break;

        case 52:
#line 281 "parse.y"
        {
         d_val__.get<Tag__::EXP>() = d_vsp__[0].data<Tag__::EXP>();
         }
        break;

        case 53:
#line 285 "parse.y"
        {
         ExpAst *a = new UN_OP(d_vsp__[-1].data<Tag__::TEXT>(), d_vsp__[0].data<Tag__::EXP>());
         d_val__.get<Tag__::EXP>() = a;
         }
        break;

        case 54:
#line 293 "parse.y"
        {
         d_val__.get<Tag__::EXP>() = d_vsp__[0].data<Tag__::EXP>();
         }
        break;

        case 55:
#line 297 "parse.y"
        {
         ExpAst *e = new EXP_EMPTY();
         ExpAst *a = new FUNC(d_vsp__[-2].data<Tag__::TEXT>(), e);
         d_val__.get<Tag__::EXP>() = a;
         }
        break;

        case 56:
#line 303 "parse.y"
        {
         ExpAst *a = new FUNC(d_vsp__[-3].data<Tag__::TEXT>(), d_vsp__[-1].data<Tag__::EXP>());
         d_val__.get<Tag__::EXP>() = a;
         }
        break;

        case 57:
#line 308 "parse.y"
        {
         ExpAst *a = new UN_OP("INC_OP", d_vsp__[-1].data<Tag__::REF>());
         d_val__.get<Tag__::EXP>() = a;
         }
        break;

        case 58:
#line 316 "parse.y"
        {
         d_val__.get<Tag__::EXP>() = d_vsp__[0].data<Tag__::REF>();
         }
        break;

        case 59:
#line 320 "parse.y"
        {
         ExpAst *a = new EXP_ASSIGN(d_vsp__[-2].data<Tag__::REF>(), d_vsp__[0].data<Tag__::EXP>());
         d_val__.get<Tag__::EXP>() = a; 
         }
        break;

        case 60:
#line 325 "parse.y"
        {
         ExpAst *a = new POINTER(d_vsp__[0].data<Tag__::REF>());
         d_val__.get<Tag__::EXP>() = a;
         }
        break;

        case 61:
#line 330 "parse.y"
        {
         ExpAst * a = new INT_EXP(d_scanner.matched());
         d_val__.get<Tag__::EXP>() = a; 
         }
        break;

        case 62:
#line 335 "parse.y"
        {
         ExpAst * a = new FLOAT_EXP(d_scanner.matched());
         d_val__.get<Tag__::EXP>() = a;
         }
        break;

        case 63:
#line 340 "parse.y"
        {
         ExpAst * a = new STRING_EXP(d_scanner.matched());
         d_val__.get<Tag__::EXP>() = a;
         }
        break;

        case 64:
#line 345 "parse.y"
        {
         d_val__.get<Tag__::EXP>() = d_vsp__[-1].data<Tag__::EXP>();
         }
        break;

        case 65:
#line 352 "parse.y"
        {
         RefAst *a = new IDENTIFIER_REF(d_vsp__[0].data<Tag__::TEXT>());
         d_val__.get<Tag__::REF>() = a;
         }
        break;

        case 66:
#line 357 "parse.y"
        {
         RefAst *a = new ARRAYREF(d_vsp__[-3].data<Tag__::REF>(), d_vsp__[-1].data<Tag__::EXP>());
         d_val__.get<Tag__::REF>() = a;
         }
        break;

        case 67:
#line 362 "parse.y"
        {
         RefAst *a = new DEREF(d_vsp__[0].data<Tag__::REF>());
         d_val__.get<Tag__::REF>() = a;
         }
        break;

        case 68:
#line 367 "parse.y"
        {
         RefAst *a = new MEMBER(d_vsp__[-2].data<Tag__::REF>(), d_scanner.matched());
         d_val__.get<Tag__::REF>() = a;
         }
        break;

        case 69:
#line 372 "parse.y"
        {
         RefAst *a = new ARROW(d_vsp__[-2].data<Tag__::REF>(), d_scanner.matched());
         d_val__.get<Tag__::REF>() = a;
         }
        break;

        case 70:
#line 380 "parse.y"
        {
         ExpAst *a = new EXP_GROUP();
         a->pushEx(d_vsp__[0].data<Tag__::EXP>());
         d_val__.get<Tag__::EXP>() = a;
         }
        break;

        case 71:
#line 386 "parse.y"
        {
         d_vsp__[-2].data<Tag__::EXP>()->pushEx(d_vsp__[0].data<Tag__::EXP>());
         d_val__.get<Tag__::EXP>() = d_vsp__[-2].data<Tag__::EXP>();
         }
        break;

        case 72:
#line 394 "parse.y"
        {
         string a = "minus";
         d_val__.get<Tag__::TEXT>() = a;
         }
        break;

        case 73:
#line 399 "parse.y"
        {
         string a = "not";
         d_val__.get<Tag__::TEXT>() = a;
         }
        break;

        case 74:
#line 407 "parse.y"
        {
         StmtAst *a = new IF_STMT(d_vsp__[-4].data<Tag__::EXP>(), d_vsp__[-2].data<Tag__::STMT>(), d_vsp__[0].data<Tag__::STMT>());
         d_val__.get<Tag__::STMT>() = a;
         }
        break;

        case 75:
#line 415 "parse.y"
        {
         StmtAst *a = new WHILE_STMT(d_vsp__[-2].data<Tag__::EXP>(), d_vsp__[0].data<Tag__::STMT>());
         d_val__.get<Tag__::STMT>() = a;
         }
        break;

        case 76:
#line 420 "parse.y"
        {
         StmtAst *a = new FOR_STMT(d_vsp__[-6].data<Tag__::EXP>(), d_vsp__[-4].data<Tag__::EXP>(), d_vsp__[-2].data<Tag__::EXP>(), d_vsp__[0].data<Tag__::STMT>());
         d_val__.get<Tag__::STMT>() = a;
         }
        break;

    }
}
catch (std::exception const &exc)
{
    exceptionHandler__(exc);
}

inline void ParserBase::reduce__(PI__ const &pi)
{
    d_token__ = pi.d_nonTerm;
    pop__(pi.d_size);

}

// If d_token__ is _UNDETERMINED_ then if d_nextToken__ is _UNDETERMINED_ another
// token is obtained from lex(). Then d_nextToken__ is assigned to d_token__.
void Parser::nextToken()
{
    if (d_token__ != _UNDETERMINED_)        // no need for a token: got one
        return;                             // already

    if (d_nextToken__ != _UNDETERMINED_)
    {
        popToken__();                       // consume pending token
    }
    else
    {
        ++d_acceptedTokens__;               // accept another token (see
                                            // errorRecover())
        d_token__ = lex();
        if (d_token__ <= 0)
            d_token__ = _EOF_;
    }
    print();
}

// if the final transition is negative, then we should reduce by the rule
// given by its positive value. Note that the `recovery' parameter is only
// used with the --debug option
int Parser::lookup(bool recovery)
{
    // $insert threading
    SR__ *sr = s_state[d_state__];        // get the appropriate state-table
    int lastIdx = sr->d_lastIdx;        // sentinel-index in the SR__ array

    SR__ *lastElementPtr = sr + lastIdx;
    SR__ *elementPtr = sr + 1;            // start the search at s_xx[1]

    lastElementPtr->d_token = d_token__;// set search-token

    while (elementPtr->d_token != d_token__)
        ++elementPtr;

    if (elementPtr == lastElementPtr)   // reached the last element
    {
        if (elementPtr->d_action < 0)   // default reduction
        {
            return elementPtr->d_action;                
        }

        // No default reduction, so token not found, so error.
        throw UNEXPECTED_TOKEN__;
    }

    // not at the last element: inspect the nature of the action
    // (< 0: reduce, 0: ACCEPT, > 0: shift)

    int action = elementPtr->d_action;


    return action;
}

    // When an error has occurred, pop elements off the stack until the top
    // state has an error-item. If none is found, the default recovery
    // mode (which is to abort) is activated. 
    //
    // If EOF is encountered without being appropriate for the current state,
    // then the error recovery will fall back to the default recovery mode.
    // (i.e., parsing terminates)
void Parser::errorRecovery()
try
{
    if (d_acceptedTokens__ >= d_requiredTokens__)// only generate an error-
    {                                           // message if enough tokens 
        ++d_nErrors__;                          // were accepted. Otherwise
        error("Syntax error");                  // simply skip input

    }


    // get the error state
    while (not (s_state[top__()][0].d_type & ERR_ITEM))
    {
        pop__();
    }

    // In the error state, lookup a token allowing us to proceed.
    // Continuation may be possible following multiple reductions,
    // but eventuall a shift will be used, requiring the retrieval of
    // a terminal token. If a retrieved token doesn't match, the catch below 
    // will ensure the next token is requested in the while(true) block
    // implemented below:

    int lastToken = d_token__;                  // give the unexpected token a
                                                // chance to be processed
                                                // again.

    pushToken__(_error_);                       // specify _error_ as next token
    push__(lookup(true));                       // push the error state

    d_token__ = lastToken;                      // reactivate the unexpected
                                                // token (we're now in an
                                                // ERROR state).

    bool gotToken = true;                       // the next token is a terminal

    while (true)
    {
        try
        {
            if (s_state[d_state__]->d_type & REQ_TOKEN)
            {
                gotToken = d_token__ == _UNDETERMINED_;
                nextToken();                    // obtain next token
            }
            
            int action = lookup(true);

            if (action > 0)                 // push a new state
            {
                push__(action);
                popToken__();

                if (gotToken)
                {

                    d_acceptedTokens__ = 0;
                    return;
                }
            }
            else if (action < 0)
            {
                // no actions executed on recovery but save an already 
                // available token:
                if (d_token__ != _UNDETERMINED_)
                    pushToken__(d_token__);
 
                                            // next token is the rule's LHS
                reduce__(s_productionInfo[-action]); 
            }
            else
                ABORT();                    // abort when accepting during
                                            // error recovery
        }
        catch (...)
        {
            if (d_token__ == _EOF_)
                ABORT();                    // saw inappropriate _EOF_
                      
            popToken__();                   // failing token now skipped
        }
    }
}
catch (ErrorRecovery__)       // This is: DEFAULT_RECOVERY_MODE
{
    ABORT();
}

    // The parsing algorithm:
    // Initially, state 0 is pushed on the stack, and d_token__ as well as
    // d_nextToken__ are initialized to _UNDETERMINED_. 
    //
    // Then, in an eternal loop:
    //
    //  1. If a state does not have REQ_TOKEN no token is assigned to
    //     d_token__. If the state has REQ_TOKEN, nextToken() is called to
    //      determine d_nextToken__ and d_token__ is set to
    //     d_nextToken__. nextToken() will not call lex() unless d_nextToken__ is 
    //     _UNDETERMINED_. 
    //
    //  2. lookup() is called: 
    //     d_token__ is stored in the final element's d_token field of the
    //     state's SR_ array. 
    //
    //  3. The current token is looked up in the state's SR_ array
    //
    //  4. Depending on the result of the lookup() function the next state is
    //     shifted on the parser's stack, a reduction by some rule is applied,
    //     or the parsing function returns ACCEPT(). When a reduction is
    //     called for, any action that may have been defined for that
    //     reduction is executed.
    //
    //  5. An error occurs if d_token__ is not found, and the state has no
    //     default reduction. Error handling was described at the top of this
    //     file.

int Parser::parse()
try 
{
    push__(0);                              // initial state
    clearin();                              // clear the tokens.

    while (true)
    {
        try
        {
            if (s_state[d_state__]->d_type & REQ_TOKEN)
                nextToken();                // obtain next token


            int action = lookup(false);     // lookup d_token__ in d_state__

            if (action > 0)                 // SHIFT: push a new state
            {
                push__(action);
                popToken__();               // token processed
            }
            else if (action < 0)            // REDUCE: execute and pop.
            {
                executeAction(-action);
                                            // next token is the rule's LHS
                reduce__(s_productionInfo[-action]); 
            }
            else 
                ACCEPT();
        }
        catch (ErrorRecovery__)
        {
            errorRecovery();
        }
    }
}
catch (Return__ retValue)
{
    return retValue;
}

// $insert polymorphicImpl
namespace Meta__
{
   Base::~Base()
   {}
}




